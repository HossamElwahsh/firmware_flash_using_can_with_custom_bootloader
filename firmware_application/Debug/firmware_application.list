
firmware_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004c00  08004c00  00004c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  08004d0c  08004d0c  00004d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08008c3c  08008c3c  00008c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800953c  0800953c  00010014  2**0
                  CONTENTS
  4 .ARM          00000000  0800953c  0800953c  00010014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800953c  0800953c  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800953c  0800953c  0000953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000000  08009540  08009540  00010014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08009540  08009540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000014  20000000  08009544  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000020a8  20000018  08009558  00010018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200020c0  08009558  000120c0  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001003d  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a6f8  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002256  00000000  00000000  0001a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ab0  00000000  00000000  0001c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000827  00000000  00000000  0001d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017bf2  00000000  00000000  0001dca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d512  00000000  00000000  00035899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00085f5b  00000000  00000000  00042dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002b48  00000000  00000000  000c8d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  000cb850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004d0c <__do_global_dtors_aux>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4c05      	ldr	r4, [pc, #20]	; (8004d24 <__do_global_dtors_aux+0x18>)
 8004d10:	7823      	ldrb	r3, [r4, #0]
 8004d12:	b933      	cbnz	r3, 8004d22 <__do_global_dtors_aux+0x16>
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <__do_global_dtors_aux+0x1c>)
 8004d16:	b113      	cbz	r3, 8004d1e <__do_global_dtors_aux+0x12>
 8004d18:	4804      	ldr	r0, [pc, #16]	; (8004d2c <__do_global_dtors_aux+0x20>)
 8004d1a:	f3af 8000 	nop.w
 8004d1e:	2301      	movs	r3, #1
 8004d20:	7023      	strb	r3, [r4, #0]
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	20000018 	.word	0x20000018
 8004d28:	00000000 	.word	0x00000000
 8004d2c:	08008c24 	.word	0x08008c24

08004d30 <frame_dummy>:
 8004d30:	b508      	push	{r3, lr}
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <frame_dummy+0x10>)
 8004d34:	b11b      	cbz	r3, 8004d3e <frame_dummy+0xe>
 8004d36:	4903      	ldr	r1, [pc, #12]	; (8004d44 <frame_dummy+0x14>)
 8004d38:	4803      	ldr	r0, [pc, #12]	; (8004d48 <frame_dummy+0x18>)
 8004d3a:	f3af 8000 	nop.w
 8004d3e:	bd08      	pop	{r3, pc}
 8004d40:	00000000 	.word	0x00000000
 8004d44:	2000001c 	.word	0x2000001c
 8004d48:	08008c24 	.word	0x08008c24

08004d4c <strcmp>:
 8004d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d54:	2a01      	cmp	r2, #1
 8004d56:	bf28      	it	cs
 8004d58:	429a      	cmpcs	r2, r3
 8004d5a:	d0f7      	beq.n	8004d4c <strcmp>
 8004d5c:	1ad0      	subs	r0, r2, r3
 8004d5e:	4770      	bx	lr

08004d60 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e016      	b.n	8004d9c <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d74:	3301      	adds	r3, #1
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20b      	bcs.n	8004d96 <GetPage+0x36>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d304      	bcc.n	8004d96 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	e006      	b.n	8004da4 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004da0:	dde5      	ble.n	8004d6e <GetPage+0xe>
	  }
  }

  return 0;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr
	...

08004db0 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8004db0:	b5b0      	push	{r4, r5, r7, lr}
 8004db2:	b08a      	sub	sp, #40	; 0x28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8004dc2:	f002 f9d7 	bl	8007174 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff ffca 	bl	8004d60 <GetPage>
 8004dcc:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8004dda:	69f8      	ldr	r0, [r7, #28]
 8004ddc:	f7ff ffc0 	bl	8004d60 <GetPage>
 8004de0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004de2:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	0a9b      	lsrs	r3, r3, #10
 8004df6:	3301      	adds	r3, #1
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004dfa:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4619      	mov	r1, r3
 8004e02:	4818      	ldr	r0, [pc, #96]	; (8004e64 <Flash_Write_Data+0xb4>)
 8004e04:	f002 faa8 	bl	8007358 <HAL_FLASHEx_Erase>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01f      	beq.n	8004e4e <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8004e0e:	f002 f9e7 	bl	80071e0 <HAL_FLASH_GetError>
 8004e12:	4603      	mov	r3, r0
 8004e14:	e022      	b.n	8004e5c <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2200      	movs	r2, #0
 8004e22:	461c      	mov	r4, r3
 8004e24:	4615      	mov	r5, r2
 8004e26:	4622      	mov	r2, r4
 8004e28:	462b      	mov	r3, r5
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	f002 f931 	bl	8007094 <HAL_FLASH_Program>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	3301      	adds	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	e003      	b.n	8004e4e <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8004e46:	f002 f9cb 	bl	80071e0 <HAL_FLASH_GetError>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	e006      	b.n	8004e5c <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	429a      	cmp	r2, r3
 8004e54:	dbdf      	blt.n	8004e16 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8004e56:	f002 f9b3 	bl	80071c0 <HAL_FLASH_Lock>

	   return 0;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3728      	adds	r7, #40	; 0x28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bdb0      	pop	{r4, r5, r7, pc}
 8004e64:	20000034 	.word	0x20000034

08004e68 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3304      	adds	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3304      	adds	r3, #4
 8004e88:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	1e5a      	subs	r2, r3, #1
 8004e8e:	80fa      	strh	r2, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d000      	beq.n	8004e96 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8004e94:	e7ef      	b.n	8004e76 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8004e96:	bf00      	nop
	}
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
	...

08004ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	6039      	str	r1, [r7, #0]
 8004eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	db0a      	blt.n	8004ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	490c      	ldr	r1, [pc, #48]	; (8004ef0 <__NVIC_SetPriority+0x4c>)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	0112      	lsls	r2, r2, #4
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ecc:	e00a      	b.n	8004ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4908      	ldr	r1, [pc, #32]	; (8004ef4 <__NVIC_SetPriority+0x50>)
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	3b04      	subs	r3, #4
 8004edc:	0112      	lsls	r2, r2, #4
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	761a      	strb	r2, [r3, #24]
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e100 	.word	0xe000e100
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004efc:	f3bf 8f4f 	dsb	sy
}
 8004f00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <__NVIC_SystemReset+0x24>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f0a:	4904      	ldr	r1, [pc, #16]	; (8004f1c <__NVIC_SystemReset+0x24>)
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <__NVIC_SystemReset+0x28>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f12:	f3bf 8f4f 	dsb	sy
}
 8004f16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <__NVIC_SystemReset+0x20>
 8004f1c:	e000ed00 	.word	0xe000ed00
 8004f20:	05fa0004 	.word	0x05fa0004

08004f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f34:	d301      	bcc.n	8004f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f36:	2301      	movs	r3, #1
 8004f38:	e00f      	b.n	8004f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <SysTick_Config+0x40>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f42:	210f      	movs	r1, #15
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	f7ff ffac 	bl	8004ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <SysTick_Config+0x40>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <SysTick_Config+0x40>)
 8004f54:	2207      	movs	r2, #7
 8004f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	e000e010 	.word	0xe000e010

08004f68 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	/* loop counter for received update data */
	int i = ZERO;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

	/* Read Message into local buffer [RxData] */
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, un_gs_RxConv.RxData);
 8004f74:	4b42      	ldr	r3, [pc, #264]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004f76:	4a43      	ldr	r2, [pc, #268]	; (8005084 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 fc13 	bl	80067a6 <HAL_CAN_GetRxMessage>

	// Toggle Receive LED indicator
	HAL_GPIO_TogglePin(APP_LED_RX_CAN_ARGS);
 8004f80:	2104      	movs	r1, #4
 8004f82:	4841      	ldr	r0, [pc, #260]	; (8005088 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8004f84:	f002 fc43 	bl	800780e <HAL_GPIO_TogglePin>


	/* Switch over APP states to take appropriate actions */
	switch(en_gs_app_state)
 8004f88:	4b40      	ldr	r3, [pc, #256]	; (800508c <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b0a      	cmp	r3, #10
 8004f8e:	d86d      	bhi.n	800506c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	0800506d 	.word	0x0800506d
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	0800506d 	.word	0x0800506d
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08005001 	.word	0x08005001
 8004fac:	0800506d 	.word	0x0800506d
 8004fb0:	0800506d 	.word	0x0800506d
 8004fb4:	08005029 	.word	0x08005029
 8004fb8:	0800506d 	.word	0x0800506d
 8004fbc:	0800506d 	.word	0x0800506d
 8004fc0:	0800506d 	.word	0x0800506d
		 break;
		}
		case APP_STATE_CHECK_FOR_UPDATES:
		{
			/* Check for response */
			if(ZERO == strcmp((char *)un_gs_RxConv.RxData, (char *)APP_CAN_RESP_OK_UPDATE))
 8004fc4:	4932      	ldr	r1, [pc, #200]	; (8005090 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8004fc6:	482e      	ldr	r0, [pc, #184]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004fc8:	f7ff fec0 	bl	8004d4c <strcmp>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
			{
				/* Update Available - Request update size */
                app_switch_state(APP_STATE_GET_UPDATE_SIZE);
 8004fd2:	2003      	movs	r0, #3
 8004fd4:	f000 fa90 	bl	80054f8 <app_switch_state>
            }
			else
			{
				/* Drop */
			}
			break;
 8004fd8:	e04a      	b.n	8005070 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
			else if(ZERO == strcmp((char *)un_gs_RxConv.RxData, (char *)APP_CAN_RESP_NO_UPDATE))
 8004fda:	492e      	ldr	r1, [pc, #184]	; (8005094 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8004fdc:	4828      	ldr	r0, [pc, #160]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004fde:	f7ff feb5 	bl	8004d4c <strcmp>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d143      	bne.n	8005070 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
                app_switch_state(APP_STATE_NO_UPDATE_AV);
 8004fe8:	2002      	movs	r0, #2
 8004fea:	f000 fa85 	bl	80054f8 <app_switch_state>
			break;
 8004fee:	e03f      	b.n	8005070 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
		}
		case APP_STATE_GET_UPDATE_SIZE:
		{
			/* Store size */
			u32_gs_update_size = un_gs_RxConv.u32_Rx_Number;
 8004ff0:	4b23      	ldr	r3, [pc, #140]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8004ff6:	6013      	str	r3, [r2, #0]

			/* Fetch again */
            app_switch_state(APP_STATE_GET_UPDATE_SIZE_AGAIN);
 8004ff8:	2004      	movs	r0, #4
 8004ffa:	f000 fa7d 	bl	80054f8 <app_switch_state>
			break;
 8004ffe:	e03a      	b.n	8005076 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
		}
		case APP_STATE_GET_UPDATE_SIZE_AGAIN:
		{
			/* Verify size */
			if(
					(u32_gs_update_size == un_gs_RxConv.u32_Rx_Number) &&
 8005000:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8005006:	681b      	ldr	r3, [r3, #0]
			if(
 8005008:	429a      	cmp	r2, r3
 800500a:	d109      	bne.n	8005020 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
					(u32_gs_update_size < APP_UPDATE_MAX_SIZE_BYTES)
 800500c:	4b22      	ldr	r3, [pc, #136]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800500e:	681b      	ldr	r3, [r3, #0]
					(u32_gs_update_size == un_gs_RxConv.u32_Rx_Number) &&
 8005010:	f641 3257 	movw	r2, #6999	; 0x1b57
 8005014:	4293      	cmp	r3, r2
 8005016:	d803      	bhi.n	8005020 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
			)
			{
				/* Sizes Matches and Valid - Proceed with update */
                app_switch_state(APP_STATE_START_UPDATE);
 8005018:	2006      	movs	r0, #6
 800501a:	f000 fa6d 	bl	80054f8 <app_switch_state>
			{
				/* Fail */
                app_switch_state(APP_STATE_INVALID_UPDATE_SIZE);
			}

			break;
 800501e:	e02a      	b.n	8005076 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
                app_switch_state(APP_STATE_INVALID_UPDATE_SIZE);
 8005020:	2005      	movs	r0, #5
 8005022:	f000 fa69 	bl	80054f8 <app_switch_state>
			break;
 8005026:	e026      	b.n	8005076 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
		}
		case APP_STATE_RECEIVING_UPDATE:
		{
			/* Parse and Store Update Bytes */

			  for(i = 0; i < APP_RX_DATA_LENGTH; i++)
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e00c      	b.n	8005048 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			  {
				  update_data_arr[i + u32_gs_rec_count] = un_gs_RxConv.RxData[i];
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4413      	add	r3, r2
 8005036:	4912      	ldr	r1, [pc, #72]	; (8005080 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	440a      	add	r2, r1
 800503c:	7811      	ldrb	r1, [r2, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8005040:	54d1      	strb	r1, [r2, r3]
			  for(i = 0; i < APP_RX_DATA_LENGTH; i++)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b07      	cmp	r3, #7
 800504c:	ddef      	ble.n	800502e <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
			  }

			  u32_gs_rec_count += APP_RX_DATA_LENGTH;
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8005056:	6013      	str	r3, [r2, #0]


			  // Check if total received count is correct
			  if(u32_gs_rec_count >= u32_gs_update_size)
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d307      	bcc.n	8005074 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			  {
				  /* Update APP state */
                  app_switch_state(APP_STATE_UPDATE_RECEIVED);
 8005064:	2008      	movs	r0, #8
 8005066:	f000 fa47 	bl	80054f8 <app_switch_state>
			  else
			  {
				  /* Do Nothing */
			  }

		  break;
 800506a:	e003      	b.n	8005074 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
            break;
        }
        default:
		{
		  /* Do Nothing */
		  break;
 800506c:	bf00      	nop
 800506e:	e002      	b.n	8005076 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
			break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
		  break;
 8005074:	bf00      	nop
		}

    }
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000124 	.word	0x20000124
 8005084:	200000dc 	.word	0x200000dc
 8005088:	40010800 	.word	0x40010800
 800508c:	200000c1 	.word	0x200000c1
 8005090:	08008c3c 	.word	0x08008c3c
 8005094:	08008c48 	.word	0x08008c48
 8005098:	20001c90 	.word	0x20001c90
 800509c:	20001c8c 	.word	0x20001c8c
 80050a0:	20000134 	.word	0x20000134

080050a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050aa:	f000 ffeb 	bl	8006084 <HAL_Init>

  /* USER CODE BEGIN Init */
	GPIO_Loc_UpdateBtnState = GPIO_PIN_SET;
 80050ae:	2301      	movs	r3, #1
 80050b0:	70fb      	strb	r3, [r7, #3]
	GPIO_Loc_ResetBtnState = GPIO_PIN_SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	70bb      	strb	r3, [r7, #2]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050b6:	f000 f907 	bl	80052c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050ba:	f000 f9a3 	bl	8005404 <MX_GPIO_Init>
  MX_CAN_Init();
 80050be:	f000 f93d 	bl	800533c <MX_CAN_Init>
  MX_I2C1_Init();
 80050c2:	f000 f971 	bl	80053a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init (); // initialize the display
 80050c6:	f000 fb7d 	bl	80057c4 <SSD1306_Init>

  SSD1306_Clear();
 80050ca:	f000 fd9e 	bl	8005c0a <SSD1306_Clear>

  /* Systick Config */
  /* Update SystemCoreClock variable according to Clock Register Values */
	SystemCoreClockUpdate();
 80050ce:	f000 ff41 	bl	8005f54 <SystemCoreClockUpdate>

	/* Generates interrupt every 2 seconds
	 * Handler inside stm32f1xx_it.c -> SysTick_Handler
	 * */
	SysTick_Config(SystemCoreClock*2);
 80050d2:	4b6d      	ldr	r3, [pc, #436]	; (8005288 <main+0x1e4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff23 	bl	8004f24 <SysTick_Config>

	SysTick->CTRL = 0;
 80050de:	4b6b      	ldr	r3, [pc, #428]	; (800528c <main+0x1e8>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0;
 80050e4:	4b69      	ldr	r3, [pc, #420]	; (800528c <main+0x1e8>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL =
 80050ea:	4b68      	ldr	r3, [pc, #416]	; (800528c <main+0x1e8>)
 80050ec:	2207      	movs	r2, #7
 80050ee:	601a      	str	r2, [r3, #0]
	  | SysTick_CTRL_ENABLE_Msk
	  | SysTick_CTRL_CLKSOURCE_Msk);


	/* Init CAN Tx Variables */
	TxData[0] = 0x00;
 80050f0:	4b67      	ldr	r3, [pc, #412]	; (8005290 <main+0x1ec>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]

	TxHeader.DLC=1; //give message size of 1 byte
 80050f6:	4b67      	ldr	r3, [pc, #412]	; (8005294 <main+0x1f0>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	611a      	str	r2, [r3, #16]
	TxHeader.IDE=CAN_ID_STD; //set identifier to standard
 80050fc:	4b65      	ldr	r3, [pc, #404]	; (8005294 <main+0x1f0>)
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
	TxHeader.RTR=CAN_RTR_DATA; //RTR bit is set to data
 8005102:	4b64      	ldr	r3, [pc, #400]	; (8005294 <main+0x1f0>)
 8005104:	2200      	movs	r2, #0
 8005106:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8005108:	4b62      	ldr	r3, [pc, #392]	; (8005294 <main+0x1f0>)
 800510a:	2200      	movs	r2, #0
 800510c:	751a      	strb	r2, [r3, #20]

   /* Configure CAN Receiving Filter */
   /* set FIFO assignment */
   FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800510e:	4b62      	ldr	r3, [pc, #392]	; (8005298 <main+0x1f4>)
 8005110:	2200      	movs	r2, #0
 8005112:	611a      	str	r2, [r3, #16]
   /* 0x245<<5; the ID that the filter looks for: Zero to pass all IDs */
   FilterConfig.FilterIdHigh = 0;
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <main+0x1f4>)
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
   FilterConfig.FilterIdLow = 0;
 800511a:	4b5f      	ldr	r3, [pc, #380]	; (8005298 <main+0x1f4>)
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
   FilterConfig.FilterMaskIdHigh = 0;
 8005120:	4b5d      	ldr	r3, [pc, #372]	; (8005298 <main+0x1f4>)
 8005122:	2200      	movs	r2, #0
 8005124:	609a      	str	r2, [r3, #8]
   FilterConfig.FilterMaskIdLow = 0;
 8005126:	4b5c      	ldr	r3, [pc, #368]	; (8005298 <main+0x1f4>)
 8005128:	2200      	movs	r2, #0
 800512a:	60da      	str	r2, [r3, #12]

   /* Set Filter Scale */
   FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //set filter scale
 800512c:	4b5a      	ldr	r3, [pc, #360]	; (8005298 <main+0x1f4>)
 800512e:	2201      	movs	r2, #1
 8005130:	61da      	str	r2, [r3, #28]

   /* Enable Filter */
   FilterConfig.FilterActivation = ENABLE;
 8005132:	4b59      	ldr	r3, [pc, #356]	; (8005298 <main+0x1f4>)
 8005134:	2201      	movs	r2, #1
 8005136:	621a      	str	r2, [r3, #32]

   /* Configure CAN Filter */
   HAL_CAN_ConfigFilter(&hcan, &FilterConfig); //configure CAN filter
 8005138:	4957      	ldr	r1, [pc, #348]	; (8005298 <main+0x1f4>)
 800513a:	4858      	ldr	r0, [pc, #352]	; (800529c <main+0x1f8>)
 800513c:	f001 f923 	bl	8006386 <HAL_CAN_ConfigFilter>

   /* Start CAN */
   HAL_CAN_Start(&hcan);
 8005140:	4856      	ldr	r0, [pc, #344]	; (800529c <main+0x1f8>)
 8005142:	f001 f9e9 	bl	8006518 <HAL_CAN_Start>

   /* Enable Rx FIFO0 Interrupt */
   HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005146:	2102      	movs	r1, #2
 8005148:	4854      	ldr	r0, [pc, #336]	; (800529c <main+0x1f8>)
 800514a:	f001 fc4d 	bl	80069e8 <HAL_CAN_ActivateNotification>

    /* Switch app state to normal */
    app_switch_state(APP_STATE_NORMAL);
 800514e:	2000      	movs	r0, #0
 8005150:	f000 f9d2 	bl	80054f8 <app_switch_state>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* switch on current app state */
	  switch(en_gs_app_state)
 8005154:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <main+0x1fc>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b0a      	cmp	r3, #10
 800515a:	f200 8091 	bhi.w	8005280 <main+0x1dc>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <main+0xc0>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005191 	.word	0x08005191
 8005168:	08005281 	.word	0x08005281
 800516c:	080051df 	.word	0x080051df
 8005170:	08005281 	.word	0x08005281
 8005174:	08005281 	.word	0x08005281
 8005178:	080051c5 	.word	0x080051c5
 800517c:	08005281 	.word	0x08005281
 8005180:	08005281 	.word	0x08005281
 8005184:	080051f9 	.word	0x080051f9
 8005188:	08005249 	.word	0x08005249
 800518c:	08005281 	.word	0x08005281
	  {
		  case APP_STATE_NORMAL:
		  {

			  /* Check if update button is pressed */
			  GPIO_Loc_UpdateBtnState = HAL_GPIO_ReadPin(APP_UPDATE_BTN_ARGS);
 8005190:	2101      	movs	r1, #1
 8005192:	4844      	ldr	r0, [pc, #272]	; (80052a4 <main+0x200>)
 8005194:	f002 fb0c 	bl	80077b0 <HAL_GPIO_ReadPin>
 8005198:	4603      	mov	r3, r0
 800519a:	70fb      	strb	r3, [r7, #3]
			  GPIO_Loc_ResetBtnState = HAL_GPIO_ReadPin(APP_RESET_BTN_ARGS);
 800519c:	2102      	movs	r1, #2
 800519e:	4841      	ldr	r0, [pc, #260]	; (80052a4 <main+0x200>)
 80051a0:	f002 fb06 	bl	80077b0 <HAL_GPIO_ReadPin>
 80051a4:	4603      	mov	r3, r0
 80051a6:	70bb      	strb	r3, [r7, #2]

			  if(GPIO_PIN_RESET == GPIO_Loc_ResetBtnState)
 80051a8:	78bb      	ldrb	r3, [r7, #2]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <main+0x112>
			  {
				  /* Clear Screen */
                  SSD1306_Clear();
 80051ae:	f000 fd2c 	bl	8005c0a <SSD1306_Clear>

                  /* Reset system - bootloader will handle the switching */
                  NVIC_SystemReset();
 80051b2:	f7ff fea1 	bl	8004ef8 <__NVIC_SystemReset>
			  }
			  else if(GPIO_PIN_RESET == GPIO_Loc_UpdateBtnState)
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d163      	bne.n	8005284 <main+0x1e0>
			  {
				  /* Btn is pressed
				   * Check for updates */
                  app_switch_state(APP_STATE_CHECK_FOR_UPDATES);
 80051bc:	2001      	movs	r0, #1
 80051be:	f000 f99b 	bl	80054f8 <app_switch_state>
			  {
				  /* Do Nothing */
			  }


			  break;
 80051c2:	e05f      	b.n	8005284 <main+0x1e0>
			  /* IDLE - Receiving Data */
			  break;
		  }
		  case APP_STATE_INVALID_UPDATE_SIZE:
		  {
              APP_OLED_CLEAR_WRITE(APP_OLED_INVALID_UPDATE_SIZE, 0, 0);
 80051c4:	2301      	movs	r3, #1
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	4837      	ldr	r0, [pc, #220]	; (80052a8 <main+0x204>)
 80051cc:	f000 fa66 	bl	800569c <app_write_on_screen>
              HAL_Delay(APP_OLED_MSG_TIMEOUT_TICKS);
 80051d0:	2001      	movs	r0, #1
 80051d2:	f000 ffb9 	bl	8006148 <HAL_Delay>
              /* Reset state back to normal */
              app_switch_state(APP_STATE_NORMAL);
 80051d6:	2000      	movs	r0, #0
 80051d8:	f000 f98e 	bl	80054f8 <app_switch_state>
              break;
 80051dc:	e053      	b.n	8005286 <main+0x1e2>
		  }

		  case APP_STATE_NO_UPDATE_AV:
		  {
              APP_OLED_CLEAR_WRITE(APP_OLED_NO_UPDATES, 0, 0);
 80051de:	2301      	movs	r3, #1
 80051e0:	2200      	movs	r2, #0
 80051e2:	2100      	movs	r1, #0
 80051e4:	4831      	ldr	r0, [pc, #196]	; (80052ac <main+0x208>)
 80051e6:	f000 fa59 	bl	800569c <app_write_on_screen>
              HAL_Delay(APP_OLED_MSG_TIMEOUT_TICKS);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f000 ffac 	bl	8006148 <HAL_Delay>
              /* Reset state back to normal */
              app_switch_state(APP_STATE_NORMAL);
 80051f0:	2000      	movs	r0, #0
 80051f2:	f000 f981 	bl	80054f8 <app_switch_state>
              break;
 80051f6:	e046      	b.n	8005286 <main+0x1e2>
		  }
		  case APP_STATE_UPDATE_RECEIVED:
		  {

			  /* Add Padding If needed */
			  uint8_t mod_result = MOD(u32_gs_update_size, APP_TX_DATA_LENGTH);
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <main+0x20c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	707b      	strb	r3, [r7, #1]

			  if(ZERO == mod_result)
 8005204:	787b      	ldrb	r3, [r7, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01a      	beq.n	8005240 <main+0x19c>
				  /* No Padding Needed */
			  }
			  else
			  {
				  /* Add Padding */
				  uint8_t padding_count = APP_TX_DATA_LENGTH - mod_result;
 800520a:	787b      	ldrb	r3, [r7, #1]
 800520c:	f1c3 0308 	rsb	r3, r3, #8
 8005210:	703b      	strb	r3, [r7, #0]

				  /* Add 0xFF padding */
				  for (int var = 0; var < padding_count; ++var)
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	e009      	b.n	800522c <main+0x188>
				  {
					  update_data_arr[u32_gs_rec_count + var] = BYTE_MAX_VAL;
 8005218:	4b26      	ldr	r3, [pc, #152]	; (80052b4 <main+0x210>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4413      	add	r3, r2
 8005220:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <main+0x214>)
 8005222:	21ff      	movs	r1, #255	; 0xff
 8005224:	54d1      	strb	r1, [r2, r3]
				  for (int var = 0; var < padding_count; ++var)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3301      	adds	r3, #1
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	783b      	ldrb	r3, [r7, #0]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	dbf1      	blt.n	8005218 <main+0x174>
				  }

				  /* Update size to be flashed */
				  u32_gs_update_size += padding_count;
 8005234:	783a      	ldrb	r2, [r7, #0]
 8005236:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <main+0x20c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4413      	add	r3, r2
 800523c:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <main+0x20c>)
 800523e:	6013      	str	r3, [r2, #0]
			  }

              app_switch_state(APP_STATE_FLASHING);
 8005240:	2009      	movs	r0, #9
 8005242:	f000 f959 	bl	80054f8 <app_switch_state>
			  break;
 8005246:	e01e      	b.n	8005286 <main+0x1e2>
          {
              /* Flash Update
               * Division by two because we flash 16 bits (2-bytes) per write
               *  */
              Flash_Write_Data(APP_UPDATE_START_ADDRESS,
                               ((uint32_t *)update_data_arr), u32_gs_update_size / 2);
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <main+0x20c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	085b      	lsrs	r3, r3, #1
              Flash_Write_Data(APP_UPDATE_START_ADDRESS,
 800524e:	b29b      	uxth	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	4919      	ldr	r1, [pc, #100]	; (80052b8 <main+0x214>)
 8005254:	4819      	ldr	r0, [pc, #100]	; (80052bc <main+0x218>)
 8005256:	f7ff fdab 	bl	8004db0 <Flash_Write_Data>

              /* Turn on status LED indicator to indicate flash is done */
              APP_UPDATE_STATUS_LED(GPIO_PIN_SET);
 800525a:	2201      	movs	r2, #1
 800525c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005260:	4817      	ldr	r0, [pc, #92]	; (80052c0 <main+0x21c>)
 8005262:	f002 fabc 	bl	80077de <HAL_GPIO_WritePin>

              APP_OLED_WRITE(APP_OLED_UPDATED_INSTALLED, 0, 4);
 8005266:	2300      	movs	r3, #0
 8005268:	2204      	movs	r2, #4
 800526a:	2100      	movs	r1, #0
 800526c:	4815      	ldr	r0, [pc, #84]	; (80052c4 <main+0x220>)
 800526e:	f000 fa15 	bl	800569c <app_write_on_screen>

              HAL_Delay(APP_OLED_MSG_TIMEOUT_TICKS);
 8005272:	2001      	movs	r0, #1
 8005274:	f000 ff68 	bl	8006148 <HAL_Delay>

              app_switch_state(APP_STATE_NORMAL);
 8005278:	2000      	movs	r0, #0
 800527a:	f000 f93d 	bl	80054f8 <app_switch_state>
              break;
 800527e:	e002      	b.n	8005286 <main+0x1e2>
              break;
          }
		  default:
		  {
			  /* Do Nothing */
			  break;
 8005280:	bf00      	nop
 8005282:	e767      	b.n	8005154 <main+0xb0>
			  break;
 8005284:	bf00      	nop
	  switch(en_gs_app_state)
 8005286:	e765      	b.n	8005154 <main+0xb0>
 8005288:	20000008 	.word	0x20000008
 800528c:	e000e010 	.word	0xe000e010
 8005290:	2000012c 	.word	0x2000012c
 8005294:	200000c4 	.word	0x200000c4
 8005298:	200000f8 	.word	0x200000f8
 800529c:	20000044 	.word	0x20000044
 80052a0:	200000c1 	.word	0x200000c1
 80052a4:	40010c00 	.word	0x40010c00
 80052a8:	08008c54 	.word	0x08008c54
 80052ac:	08008c68 	.word	0x08008c68
 80052b0:	20001c90 	.word	0x20001c90
 80052b4:	20001c8c 	.word	0x20001c8c
 80052b8:	20000134 	.word	0x20000134
 80052bc:	08001c00 	.word	0x08001c00
 80052c0:	40011000 	.word	0x40011000
 80052c4:	08008c7c 	.word	0x08008c7c

080052c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b090      	sub	sp, #64	; 0x40
 80052cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052ce:	f107 0318 	add.w	r3, r7, #24
 80052d2:	2228      	movs	r2, #40	; 0x28
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f003 fc78 	bl	8008bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	605a      	str	r2, [r3, #4]
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	60da      	str	r2, [r3, #12]
 80052e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80052ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052f8:	f107 0318 	add.w	r3, r7, #24
 80052fc:	4618      	mov	r0, r3
 80052fe:	f003 f869 	bl	80083d4 <HAL_RCC_OscConfig>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <SystemClock_Config+0x44>
  {
    Error_Handler();
 8005308:	f000 fa56 	bl	80057b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800530c:	230f      	movs	r3, #15
 800530e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8005310:	2301      	movs	r3, #1
 8005312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005320:	1d3b      	adds	r3, r7, #4
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f003 fad7 	bl	80088d8 <HAL_RCC_ClockConfig>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8005330:	f000 fa42 	bl	80057b8 <Error_Handler>
  }
}
 8005334:	bf00      	nop
 8005336:	3740      	adds	r7, #64	; 0x40
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8005340:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <MX_CAN_Init+0x64>)
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <MX_CAN_Init+0x68>)
 8005344:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <MX_CAN_Init+0x64>)
 8005348:	2210      	movs	r2, #16
 800534a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800534c:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <MX_CAN_Init+0x64>)
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <MX_CAN_Init+0x64>)
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <MX_CAN_Init+0x64>)
 800535a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800535e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <MX_CAN_Init+0x64>)
 8005362:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005366:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8005368:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <MX_CAN_Init+0x64>)
 800536a:	2200      	movs	r2, #0
 800536c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <MX_CAN_Init+0x64>)
 8005370:	2200      	movs	r2, #0
 8005372:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <MX_CAN_Init+0x64>)
 8005376:	2200      	movs	r2, #0
 8005378:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <MX_CAN_Init+0x64>)
 800537c:	2201      	movs	r2, #1
 800537e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <MX_CAN_Init+0x64>)
 8005382:	2200      	movs	r2, #0
 8005384:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <MX_CAN_Init+0x64>)
 8005388:	2201      	movs	r2, #1
 800538a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800538c:	4804      	ldr	r0, [pc, #16]	; (80053a0 <MX_CAN_Init+0x64>)
 800538e:	f000 feff 	bl	8006190 <HAL_CAN_Init>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8005398:	f000 fa0e 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000044 	.word	0x20000044
 80053a4:	40006400 	.word	0x40006400

080053a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053ae:	4a13      	ldr	r2, [pc, #76]	; (80053fc <MX_I2C1_Init+0x54>)
 80053b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80053b2:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053b4:	4a12      	ldr	r2, [pc, #72]	; (8005400 <MX_I2C1_Init+0x58>)
 80053b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80053be:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053e4:	4804      	ldr	r0, [pc, #16]	; (80053f8 <MX_I2C1_Init+0x50>)
 80053e6:	f002 fa2b 	bl	8007840 <HAL_I2C_Init>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80053f0:	f000 f9e2 	bl	80057b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	2000006c 	.word	0x2000006c
 80053fc:	40005400 	.word	0x40005400
 8005400:	00061a80 	.word	0x00061a80

08005404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540a:	f107 0310 	add.w	r3, r7, #16
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005418:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	4a32      	ldr	r2, [pc, #200]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800541e:	f043 0310 	orr.w	r3, r3, #16
 8005422:	6193      	str	r3, [r2, #24]
 8005424:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005430:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005436:	f043 0320 	orr.w	r3, r3, #32
 800543a:	6193      	str	r3, [r2, #24]
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0320 	and.w	r3, r3, #32
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800544e:	f043 0304 	orr.w	r3, r3, #4
 8005452:	6193      	str	r3, [r2, #24]
 8005454:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005460:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005466:	f043 0308 	orr.w	r3, r3, #8
 800546a:	6193      	str	r3, [r2, #24]
 800546c:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005478:	2200      	movs	r2, #0
 800547a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800547e:	481b      	ldr	r0, [pc, #108]	; (80054ec <MX_GPIO_Init+0xe8>)
 8005480:	f002 f9ad 	bl	80077de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8005484:	2200      	movs	r2, #0
 8005486:	2106      	movs	r1, #6
 8005488:	4819      	ldr	r0, [pc, #100]	; (80054f0 <MX_GPIO_Init+0xec>)
 800548a:	f002 f9a8 	bl	80077de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800548e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005494:	2301      	movs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	2300      	movs	r3, #0
 800549a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549c:	2302      	movs	r3, #2
 800549e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4619      	mov	r1, r3
 80054a6:	4811      	ldr	r0, [pc, #68]	; (80054ec <MX_GPIO_Init+0xe8>)
 80054a8:	f001 fffe 	bl	80074a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80054ac:	2306      	movs	r3, #6
 80054ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b8:	2302      	movs	r3, #2
 80054ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054bc:	f107 0310 	add.w	r3, r7, #16
 80054c0:	4619      	mov	r1, r3
 80054c2:	480b      	ldr	r0, [pc, #44]	; (80054f0 <MX_GPIO_Init+0xec>)
 80054c4:	f001 fff0 	bl	80074a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054c8:	2303      	movs	r3, #3
 80054ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d4:	f107 0310 	add.w	r3, r7, #16
 80054d8:	4619      	mov	r1, r3
 80054da:	4806      	ldr	r0, [pc, #24]	; (80054f4 <MX_GPIO_Init+0xf0>)
 80054dc:	f001 ffe4 	bl	80074a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80054e0:	bf00      	nop
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40011000 	.word	0x40011000
 80054f0:	40010800 	.word	0x40010800
 80054f4:	40010c00 	.word	0x40010c00

080054f8 <app_switch_state>:

/* USER CODE BEGIN 4 */

static void app_switch_state(en_app_state_t en_a_app_new_state)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
    switch(en_a_app_new_state)
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	2b0a      	cmp	r3, #10
 8005506:	f200 8099 	bhi.w	800563c <app_switch_state+0x144>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <app_switch_state+0x18>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	0800553d 	.word	0x0800553d
 8005514:	080055a3 	.word	0x080055a3
 8005518:	0800563d 	.word	0x0800563d
 800551c:	080055cf 	.word	0x080055cf
 8005520:	080055e3 	.word	0x080055e3
 8005524:	0800563d 	.word	0x0800563d
 8005528:	080055f7 	.word	0x080055f7
 800552c:	08005613 	.word	0x08005613
 8005530:	08005621 	.word	0x08005621
 8005534:	0800562f 	.word	0x0800562f
 8005538:	0800563d 	.word	0x0800563d
    {
        case APP_STATE_NORMAL:
        {
            /* Print welcome message */
            APP_PRINT_MAIN_WELCOME_SCREEN();
 800553c:	2301      	movs	r3, #1
 800553e:	2200      	movs	r2, #0
 8005540:	2100      	movs	r1, #0
 8005542:	4842      	ldr	r0, [pc, #264]	; (800564c <app_switch_state+0x154>)
 8005544:	f000 f8aa 	bl	800569c <app_write_on_screen>
 8005548:	2300      	movs	r3, #0
 800554a:	2201      	movs	r2, #1
 800554c:	2100      	movs	r1, #0
 800554e:	4840      	ldr	r0, [pc, #256]	; (8005650 <app_switch_state+0x158>)
 8005550:	f000 f8a4 	bl	800569c <app_write_on_screen>
 8005554:	2300      	movs	r3, #0
 8005556:	2202      	movs	r2, #2
 8005558:	2100      	movs	r1, #0
 800555a:	483e      	ldr	r0, [pc, #248]	; (8005654 <app_switch_state+0x15c>)
 800555c:	f000 f89e 	bl	800569c <app_write_on_screen>

            /* Check for new version installation to switch to */
            /* Buffer for flash data */
            uint32_t dataBuffer[1] = {0};
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

            /* Read flash data at new version installation address */
            Flash_Read_Data(APP_UPDATE_START_ADDRESS, dataBuffer, 0);
 8005564:	f107 030c 	add.w	r3, r7, #12
 8005568:	2200      	movs	r2, #0
 800556a:	4619      	mov	r1, r3
 800556c:	483a      	ldr	r0, [pc, #232]	; (8005658 <app_switch_state+0x160>)
 800556e:	f7ff fc7b 	bl	8004e68 <Flash_Read_Data>

            /* Check if there's actually new version installed in that address */
            if(dataBuffer[0] != UINT32_MAX_VAL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d00f      	beq.n	800559a <app_switch_state+0xa2>
            {
                /* New Version Available */
                APP_PRINT_NEW_VERSION_AVAILABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	2204      	movs	r2, #4
 800557e:	2100      	movs	r1, #0
 8005580:	4836      	ldr	r0, [pc, #216]	; (800565c <app_switch_state+0x164>)
 8005582:	f000 f88b 	bl	800569c <app_write_on_screen>
 8005586:	2300      	movs	r3, #0
 8005588:	2205      	movs	r2, #5
 800558a:	2100      	movs	r1, #0
 800558c:	4834      	ldr	r0, [pc, #208]	; (8005660 <app_switch_state+0x168>)
 800558e:	f000 f885 	bl	800569c <app_write_on_screen>

                /* Update Global Flag */
                bool_gs_new_version_available = TRUE;
 8005592:	4b34      	ldr	r3, [pc, #208]	; (8005664 <app_switch_state+0x16c>)
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
            {
                /* Update Global Flag */
                bool_gs_new_version_available = FALSE;
            }

            break;
 8005598:	e051      	b.n	800563e <app_switch_state+0x146>
                bool_gs_new_version_available = FALSE;
 800559a:	4b32      	ldr	r3, [pc, #200]	; (8005664 <app_switch_state+0x16c>)
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
            break;
 80055a0:	e04d      	b.n	800563e <app_switch_state+0x146>
        }
        case APP_STATE_CHECK_FOR_UPDATES:
        {
            /* Update OLED */
            APP_PRINT_CHECKING_FOR_UPDATES();
 80055a2:	2301      	movs	r3, #1
 80055a4:	2200      	movs	r2, #0
 80055a6:	2100      	movs	r1, #0
 80055a8:	482f      	ldr	r0, [pc, #188]	; (8005668 <app_switch_state+0x170>)
 80055aa:	f000 f877 	bl	800569c <app_write_on_screen>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2202      	movs	r2, #2
 80055b2:	2100      	movs	r1, #0
 80055b4:	482d      	ldr	r0, [pc, #180]	; (800566c <app_switch_state+0x174>)
 80055b6:	f000 f871 	bl	800569c <app_write_on_screen>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2203      	movs	r2, #3
 80055be:	2106      	movs	r1, #6
 80055c0:	482b      	ldr	r0, [pc, #172]	; (8005670 <app_switch_state+0x178>)
 80055c2:	f000 f86b 	bl	800569c <app_write_on_screen>

            /* Send Check for Updates Command */
            app_tx_over_can(APP_CAN_CMD_CHECK_FOR_UPDATE);
 80055c6:	482b      	ldr	r0, [pc, #172]	; (8005674 <app_switch_state+0x17c>)
 80055c8:	f000 f8c0 	bl	800574c <app_tx_over_can>
            break;
 80055cc:	e037      	b.n	800563e <app_switch_state+0x146>
        }
        case APP_STATE_GET_UPDATE_SIZE:
        {
            /* Send Get Update Size Command */
            app_tx_over_can(APP_CAN_CMD_GET_UPDATE_SIZE);
 80055ce:	482a      	ldr	r0, [pc, #168]	; (8005678 <app_switch_state+0x180>)
 80055d0:	f000 f8bc 	bl	800574c <app_tx_over_can>

            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_GETTING_UPDATE_SIZE, 0, 4);
 80055d4:	2300      	movs	r3, #0
 80055d6:	2204      	movs	r2, #4
 80055d8:	2100      	movs	r1, #0
 80055da:	4828      	ldr	r0, [pc, #160]	; (800567c <app_switch_state+0x184>)
 80055dc:	f000 f85e 	bl	800569c <app_write_on_screen>
            break;
 80055e0:	e02d      	b.n	800563e <app_switch_state+0x146>
        }
        case APP_STATE_GET_UPDATE_SIZE_AGAIN:
        {
            /* Send Get Update Size Command */
            app_tx_over_can(APP_CAN_CMD_GET_UPDATE_SIZE);
 80055e2:	4825      	ldr	r0, [pc, #148]	; (8005678 <app_switch_state+0x180>)
 80055e4:	f000 f8b2 	bl	800574c <app_tx_over_can>

            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_VERIFYING_UPDATE_SIZE, 0, 5);
 80055e8:	2300      	movs	r3, #0
 80055ea:	2205      	movs	r2, #5
 80055ec:	2100      	movs	r1, #0
 80055ee:	4824      	ldr	r0, [pc, #144]	; (8005680 <app_switch_state+0x188>)
 80055f0:	f000 f854 	bl	800569c <app_write_on_screen>
            break;
 80055f4:	e023      	b.n	800563e <app_switch_state+0x146>
        }
        case APP_STATE_START_UPDATE:
        {
            /* Update OLED */
            APP_OLED_CLEAR_WRITE(APP_OLED_STARTING_UPDATE, 0, 0);
 80055f6:	2301      	movs	r3, #1
 80055f8:	2200      	movs	r2, #0
 80055fa:	2100      	movs	r1, #0
 80055fc:	4821      	ldr	r0, [pc, #132]	; (8005684 <app_switch_state+0x18c>)
 80055fe:	f000 f84d 	bl	800569c <app_write_on_screen>

            /* Immediately Switch to Receiving update state to prevent data loss */
            en_gs_app_state = APP_STATE_RECEIVING_UPDATE;
 8005602:	4b21      	ldr	r3, [pc, #132]	; (8005688 <app_switch_state+0x190>)
 8005604:	2207      	movs	r2, #7
 8005606:	701a      	strb	r2, [r3, #0]
            en_a_app_new_state = APP_STATE_RECEIVING_UPDATE;
 8005608:	2307      	movs	r3, #7
 800560a:	71fb      	strb	r3, [r7, #7]

            /* Send Start Update Command */
            app_tx_over_can(APP_CAN_CMD_START_UPDATE);
 800560c:	481f      	ldr	r0, [pc, #124]	; (800568c <app_switch_state+0x194>)
 800560e:	f000 f89d 	bl	800574c <app_tx_over_can>
            /* No Break to process the Receiving update section */
        }
        case APP_STATE_RECEIVING_UPDATE:
        {
            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_UPDATE_IN_PROGRESS, 0, 1);
 8005612:	2300      	movs	r3, #0
 8005614:	2201      	movs	r2, #1
 8005616:	2100      	movs	r1, #0
 8005618:	481d      	ldr	r0, [pc, #116]	; (8005690 <app_switch_state+0x198>)
 800561a:	f000 f83f 	bl	800569c <app_write_on_screen>
            break;
 800561e:	e00e      	b.n	800563e <app_switch_state+0x146>
            break;
        }
        case APP_STATE_UPDATE_RECEIVED:
        {
            /* Update OLED */
            APP_OLED_WRITE(APP_OLED_UPDATED_DATA_PROCESS, 0, 2);
 8005620:	2300      	movs	r3, #0
 8005622:	2202      	movs	r2, #2
 8005624:	2100      	movs	r1, #0
 8005626:	481b      	ldr	r0, [pc, #108]	; (8005694 <app_switch_state+0x19c>)
 8005628:	f000 f838 	bl	800569c <app_write_on_screen>
            break;
 800562c:	e007      	b.n	800563e <app_switch_state+0x146>
        }
        case APP_STATE_FLASHING:
        {
            /* Do Nothing */
            APP_OLED_WRITE(APP_OLED_UPDATED_INSTALLING, 0, 3);
 800562e:	2300      	movs	r3, #0
 8005630:	2203      	movs	r2, #3
 8005632:	2100      	movs	r1, #0
 8005634:	4818      	ldr	r0, [pc, #96]	; (8005698 <app_switch_state+0x1a0>)
 8005636:	f000 f831 	bl	800569c <app_write_on_screen>
            break;
 800563a:	e000      	b.n	800563e <app_switch_state+0x146>
            break;
        }
        default:
        {
            /* Do Nothing */
            break;
 800563c:	bf00      	nop
        }

    }

    /* Update global app state */
    en_gs_app_state = en_a_app_new_state;
 800563e:	4a12      	ldr	r2, [pc, #72]	; (8005688 <app_switch_state+0x190>)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	7013      	strb	r3, [r2, #0]

}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	08008c90 	.word	0x08008c90
 8005650:	08008c94 	.word	0x08008c94
 8005654:	08008ca8 	.word	0x08008ca8
 8005658:	08001c00 	.word	0x08001c00
 800565c:	08008cbc 	.word	0x08008cbc
 8005660:	08008ccc 	.word	0x08008ccc
 8005664:	200000c0 	.word	0x200000c0
 8005668:	08008ce0 	.word	0x08008ce0
 800566c:	08008cec 	.word	0x08008cec
 8005670:	08008cfc 	.word	0x08008cfc
 8005674:	08008d08 	.word	0x08008d08
 8005678:	08008d14 	.word	0x08008d14
 800567c:	08008d20 	.word	0x08008d20
 8005680:	08008d34 	.word	0x08008d34
 8005684:	08008d48 	.word	0x08008d48
 8005688:	200000c1 	.word	0x200000c1
 800568c:	08008d5c 	.word	0x08008d5c
 8005690:	08008d68 	.word	0x08008d68
 8005694:	08008d7c 	.word	0x08008d7c
 8005698:	08008d90 	.word	0x08008d90

0800569c <app_write_on_screen>:
/* Custom Function to write on OLED Screen
 * According to Font 7x10 and Screen Size 128x64
 * Max Col, Rows are 17, 5 respectively
 * */
static void app_write_on_screen(uint8_t * string, uint8_t Col, uint8_t Row, boolean clearScreen)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	70fb      	strb	r3, [r7, #3]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70bb      	strb	r3, [r7, #2]
 80056b2:	4613      	mov	r3, r2
 80056b4:	707b      	strb	r3, [r7, #1]
	if((Col > 17) || (Row > 5))
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	2b11      	cmp	r3, #17
 80056ba:	d81f      	bhi.n	80056fc <app_write_on_screen+0x60>
 80056bc:	78bb      	ldrb	r3, [r7, #2]
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d81c      	bhi.n	80056fc <app_write_on_screen+0x60>
	{
		/* Cancel */
	}
	else
	{
		if(TRUE == clearScreen)
 80056c2:	787b      	ldrb	r3, [r7, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <app_write_on_screen+0x30>
		{
			SSD1306_Clear();
 80056c8:	f000 fa9f 	bl	8005c0a <SSD1306_Clear>
		{
			/* Do Nothing */
		}

	/* Goto Requested Position */
	  SSD1306_GotoXY (Col * 7, Row * 10);
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	00d2      	lsls	r2, r2, #3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	78bb      	ldrb	r3, [r7, #2]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	4619      	mov	r1, r3
 80056de:	0089      	lsls	r1, r1, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 f9d3 	bl	8005a94 <SSD1306_GotoXY>

	  /* Write String */
	  SSD1306_Puts ((char *) string, &Font_7x10, SSD1306_COLOR_WHITE);
 80056ee:	2201      	movs	r2, #1
 80056f0:	4904      	ldr	r1, [pc, #16]	; (8005704 <app_write_on_screen+0x68>)
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa64 	bl	8005bc0 <SSD1306_Puts>

	  /* Update Screen */
	  SSD1306_UpdateScreen(); //display
 80056f8:	f000 f928 	bl	800594c <SSD1306_UpdateScreen>

	}
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000000 	.word	0x20000000

08005708 <app_fill_array_with_str>:


/* Fills an array with APP_TX_DATA_LENGTH bytes with an APP_TX_DATA_LENGTH byte string */
static void app_fill_array_with_str(uint8_t * u8ptr_array, uint8_t * u8ptr_a_str)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	uint8_t var;

	if(
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <app_fill_array_with_str+0x38>
			(NULL_PTR != u8ptr_array) &&
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <app_fill_array_with_str+0x38>
			(NULL_PTR != u8ptr_a_str)
		)
	{
		for (var = 0; var < APP_TX_DATA_LENGTH; ++var)
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	e00a      	b.n	800573a <app_fill_array_with_str+0x32>
		{
			u8ptr_array[var] = u8ptr_a_str[var];
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	441a      	add	r2, r3
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	440b      	add	r3, r1
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
		for (var = 0; var < APP_TX_DATA_LENGTH; ++var)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	3301      	adds	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b07      	cmp	r3, #7
 800573e:	d9f1      	bls.n	8005724 <app_fill_array_with_str+0x1c>
	}
	else
	{
		/* Cancel */
	}
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
	...

0800574c <app_tx_over_can>:

static void app_tx_over_can(uint8_t * msg)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	/* CAN Mailbox free level */
	uint8_t mailbox_free_level;

	mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8005754:	4813      	ldr	r0, [pc, #76]	; (80057a4 <app_tx_over_can+0x58>)
 8005756:	f000 fff2 	bl	800673e <HAL_CAN_GetTxMailboxesFreeLevel>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]

	/* Block wait until there's a free mailbox */
	while(ZERO == mailbox_free_level)
 800575e:	e004      	b.n	800576a <app_tx_over_can+0x1e>
	{
		/* Re-check mailbox free level */
		mailbox_free_level = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8005760:	4810      	ldr	r0, [pc, #64]	; (80057a4 <app_tx_over_can+0x58>)
 8005762:	f000 ffec 	bl	800673e <HAL_CAN_GetTxMailboxesFreeLevel>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
	while(ZERO == mailbox_free_level)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f7      	beq.n	8005760 <app_tx_over_can+0x14>
	}

	TxHeader.StdId = APP_CAN_TX_MSG_ID;
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <app_tx_over_can+0x5c>)
 8005772:	f240 1201 	movw	r2, #257	; 0x101
 8005776:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = APP_TX_DATA_LENGTH;
 8005778:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <app_tx_over_can+0x5c>)
 800577a:	2208      	movs	r2, #8
 800577c:	611a      	str	r2, [r3, #16]

	/* free space in mailbox */

	/* Fill CAN TxData buffer with CMD */
	app_fill_array_with_str(TxData, msg);
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	480a      	ldr	r0, [pc, #40]	; (80057ac <app_tx_over_can+0x60>)
 8005782:	f7ff ffc1 	bl	8005708 <app_fill_array_with_str>

	/* Add Message to CAN Tx */
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <app_tx_over_can+0x64>)
 8005788:	4a08      	ldr	r2, [pc, #32]	; (80057ac <app_tx_over_can+0x60>)
 800578a:	4907      	ldr	r1, [pc, #28]	; (80057a8 <app_tx_over_can+0x5c>)
 800578c:	4805      	ldr	r0, [pc, #20]	; (80057a4 <app_tx_over_can+0x58>)
 800578e:	f000 ff07 	bl	80065a0 <HAL_CAN_AddTxMessage>

	/* Toggle TX LED indicator */
	HAL_GPIO_TogglePin(APP_LED_TX_CAN_ARGS);
 8005792:	2102      	movs	r1, #2
 8005794:	4807      	ldr	r0, [pc, #28]	; (80057b4 <app_tx_over_can+0x68>)
 8005796:	f002 f83a 	bl	800780e <HAL_GPIO_TogglePin>
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000044 	.word	0x20000044
 80057a8:	200000c4 	.word	0x200000c4
 80057ac:	2000012c 	.word	0x2000012c
 80057b0:	20000120 	.word	0x20000120
 80057b4:	40010800 	.word	0x40010800

080057b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80057bc:	b672      	cpsid	i
}
 80057be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057c0:	e7fe      	b.n	80057c0 <Error_Handler+0x8>
	...

080057c4 <SSD1306_Init>:
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}


uint8_t SSD1306_Init(void) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80057ca:	f000 fa27 	bl	8005c1c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80057ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80057d2:	2201      	movs	r2, #1
 80057d4:	2178      	movs	r1, #120	; 0x78
 80057d6:	485b      	ldr	r0, [pc, #364]	; (8005944 <SSD1306_Init+0x180>)
 80057d8:	f002 fa74 	bl	8007cc4 <HAL_I2C_IsDeviceReady>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e0a9      	b.n	800593a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80057e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80057ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80057ec:	e002      	b.n	80057f4 <SSD1306_Init+0x30>
		p--;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f9      	bne.n	80057ee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80057fa:	22ae      	movs	r2, #174	; 0xae
 80057fc:	2100      	movs	r1, #0
 80057fe:	2078      	movs	r0, #120	; 0x78
 8005800:	f000 fa86 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8005804:	2220      	movs	r2, #32
 8005806:	2100      	movs	r1, #0
 8005808:	2078      	movs	r0, #120	; 0x78
 800580a:	f000 fa81 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800580e:	2210      	movs	r2, #16
 8005810:	2100      	movs	r1, #0
 8005812:	2078      	movs	r0, #120	; 0x78
 8005814:	f000 fa7c 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005818:	22b0      	movs	r2, #176	; 0xb0
 800581a:	2100      	movs	r1, #0
 800581c:	2078      	movs	r0, #120	; 0x78
 800581e:	f000 fa77 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8005822:	22c8      	movs	r2, #200	; 0xc8
 8005824:	2100      	movs	r1, #0
 8005826:	2078      	movs	r0, #120	; 0x78
 8005828:	f000 fa72 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800582c:	2200      	movs	r2, #0
 800582e:	2100      	movs	r1, #0
 8005830:	2078      	movs	r0, #120	; 0x78
 8005832:	f000 fa6d 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005836:	2210      	movs	r2, #16
 8005838:	2100      	movs	r1, #0
 800583a:	2078      	movs	r0, #120	; 0x78
 800583c:	f000 fa68 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8005840:	2240      	movs	r2, #64	; 0x40
 8005842:	2100      	movs	r1, #0
 8005844:	2078      	movs	r0, #120	; 0x78
 8005846:	f000 fa63 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800584a:	2281      	movs	r2, #129	; 0x81
 800584c:	2100      	movs	r1, #0
 800584e:	2078      	movs	r0, #120	; 0x78
 8005850:	f000 fa5e 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	2100      	movs	r1, #0
 8005858:	2078      	movs	r0, #120	; 0x78
 800585a:	f000 fa59 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800585e:	22a1      	movs	r2, #161	; 0xa1
 8005860:	2100      	movs	r1, #0
 8005862:	2078      	movs	r0, #120	; 0x78
 8005864:	f000 fa54 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005868:	22a6      	movs	r2, #166	; 0xa6
 800586a:	2100      	movs	r1, #0
 800586c:	2078      	movs	r0, #120	; 0x78
 800586e:	f000 fa4f 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8005872:	22a8      	movs	r2, #168	; 0xa8
 8005874:	2100      	movs	r1, #0
 8005876:	2078      	movs	r0, #120	; 0x78
 8005878:	f000 fa4a 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800587c:	223f      	movs	r2, #63	; 0x3f
 800587e:	2100      	movs	r1, #0
 8005880:	2078      	movs	r0, #120	; 0x78
 8005882:	f000 fa45 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005886:	22a4      	movs	r2, #164	; 0xa4
 8005888:	2100      	movs	r1, #0
 800588a:	2078      	movs	r0, #120	; 0x78
 800588c:	f000 fa40 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8005890:	22d3      	movs	r2, #211	; 0xd3
 8005892:	2100      	movs	r1, #0
 8005894:	2078      	movs	r0, #120	; 0x78
 8005896:	f000 fa3b 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800589a:	2200      	movs	r2, #0
 800589c:	2100      	movs	r1, #0
 800589e:	2078      	movs	r0, #120	; 0x78
 80058a0:	f000 fa36 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80058a4:	22d5      	movs	r2, #213	; 0xd5
 80058a6:	2100      	movs	r1, #0
 80058a8:	2078      	movs	r0, #120	; 0x78
 80058aa:	f000 fa31 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80058ae:	22f0      	movs	r2, #240	; 0xf0
 80058b0:	2100      	movs	r1, #0
 80058b2:	2078      	movs	r0, #120	; 0x78
 80058b4:	f000 fa2c 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80058b8:	22d9      	movs	r2, #217	; 0xd9
 80058ba:	2100      	movs	r1, #0
 80058bc:	2078      	movs	r0, #120	; 0x78
 80058be:	f000 fa27 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80058c2:	2222      	movs	r2, #34	; 0x22
 80058c4:	2100      	movs	r1, #0
 80058c6:	2078      	movs	r0, #120	; 0x78
 80058c8:	f000 fa22 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80058cc:	22da      	movs	r2, #218	; 0xda
 80058ce:	2100      	movs	r1, #0
 80058d0:	2078      	movs	r0, #120	; 0x78
 80058d2:	f000 fa1d 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80058d6:	2212      	movs	r2, #18
 80058d8:	2100      	movs	r1, #0
 80058da:	2078      	movs	r0, #120	; 0x78
 80058dc:	f000 fa18 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80058e0:	22db      	movs	r2, #219	; 0xdb
 80058e2:	2100      	movs	r1, #0
 80058e4:	2078      	movs	r0, #120	; 0x78
 80058e6:	f000 fa13 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80058ea:	2220      	movs	r2, #32
 80058ec:	2100      	movs	r1, #0
 80058ee:	2078      	movs	r0, #120	; 0x78
 80058f0:	f000 fa0e 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80058f4:	228d      	movs	r2, #141	; 0x8d
 80058f6:	2100      	movs	r1, #0
 80058f8:	2078      	movs	r0, #120	; 0x78
 80058fa:	f000 fa09 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80058fe:	2214      	movs	r2, #20
 8005900:	2100      	movs	r1, #0
 8005902:	2078      	movs	r0, #120	; 0x78
 8005904:	f000 fa04 	bl	8005d10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005908:	22af      	movs	r2, #175	; 0xaf
 800590a:	2100      	movs	r1, #0
 800590c:	2078      	movs	r0, #120	; 0x78
 800590e:	f000 f9ff 	bl	8005d10 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8005912:	222e      	movs	r2, #46	; 0x2e
 8005914:	2100      	movs	r1, #0
 8005916:	2078      	movs	r0, #120	; 0x78
 8005918:	f000 f9fa 	bl	8005d10 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800591c:	2000      	movs	r0, #0
 800591e:	f000 f843 	bl	80059a8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8005922:	f000 f813 	bl	800594c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8005926:	4b08      	ldr	r3, [pc, #32]	; (8005948 <SSD1306_Init+0x184>)
 8005928:	2200      	movs	r2, #0
 800592a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <SSD1306_Init+0x184>)
 800592e:	2200      	movs	r2, #0
 8005930:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <SSD1306_Init+0x184>)
 8005934:	2201      	movs	r2, #1
 8005936:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8005938:	2301      	movs	r3, #1
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	2000006c 	.word	0x2000006c
 8005948:	20002094 	.word	0x20002094

0800594c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8005952:	2300      	movs	r3, #0
 8005954:	71fb      	strb	r3, [r7, #7]
 8005956:	e01d      	b.n	8005994 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	3b50      	subs	r3, #80	; 0x50
 800595c:	b2db      	uxtb	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	2100      	movs	r1, #0
 8005962:	2078      	movs	r0, #120	; 0x78
 8005964:	f000 f9d4 	bl	8005d10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005968:	2200      	movs	r2, #0
 800596a:	2100      	movs	r1, #0
 800596c:	2078      	movs	r0, #120	; 0x78
 800596e:	f000 f9cf 	bl	8005d10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8005972:	2210      	movs	r2, #16
 8005974:	2100      	movs	r1, #0
 8005976:	2078      	movs	r0, #120	; 0x78
 8005978:	f000 f9ca 	bl	8005d10 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	01db      	lsls	r3, r3, #7
 8005980:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <SSD1306_UpdateScreen+0x58>)
 8005982:	441a      	add	r2, r3
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	2140      	movs	r1, #64	; 0x40
 8005988:	2078      	movs	r0, #120	; 0x78
 800598a:	f000 f95b 	bl	8005c44 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	3301      	adds	r3, #1
 8005992:	71fb      	strb	r3, [r7, #7]
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b07      	cmp	r3, #7
 8005998:	d9de      	bls.n	8005958 <SSD1306_UpdateScreen+0xc>
	}
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20001c94 	.word	0x20001c94

080059a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <SSD1306_Fill+0x14>
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <SSD1306_Fill+0x16>
 80059bc:	23ff      	movs	r3, #255	; 0xff
 80059be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059c2:	4619      	mov	r1, r3
 80059c4:	4803      	ldr	r0, [pc, #12]	; (80059d4 <SSD1306_Fill+0x2c>)
 80059c6:	f003 f901 	bl	8008bcc <memset>
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20001c94 	.word	0x20001c94

080059d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	80fb      	strh	r3, [r7, #6]
 80059e2:	460b      	mov	r3, r1
 80059e4:	80bb      	strh	r3, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	70fb      	strb	r3, [r7, #3]
	if (
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	2b7f      	cmp	r3, #127	; 0x7f
 80059ee:	d848      	bhi.n	8005a82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80059f0:	88bb      	ldrh	r3, [r7, #4]
 80059f2:	2b3f      	cmp	r3, #63	; 0x3f
 80059f4:	d845      	bhi.n	8005a82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80059f6:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <SSD1306_DrawPixel+0xb4>)
 80059f8:	791b      	ldrb	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d11a      	bne.n	8005a48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	88bb      	ldrh	r3, [r7, #4]
 8005a16:	08db      	lsrs	r3, r3, #3
 8005a18:	b298      	uxth	r0, r3
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	01db      	lsls	r3, r3, #7
 8005a1e:	4413      	add	r3, r2
 8005a20:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <SSD1306_DrawPixel+0xb8>)
 8005a22:	5cd3      	ldrb	r3, [r2, r3]
 8005a24:	b25a      	sxtb	r2, r3
 8005a26:	88bb      	ldrh	r3, [r7, #4]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	4313      	orrs	r3, r2
 8005a36:	b259      	sxtb	r1, r3
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	01db      	lsls	r3, r3, #7
 8005a3e:	4413      	add	r3, r2
 8005a40:	b2c9      	uxtb	r1, r1
 8005a42:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <SSD1306_DrawPixel+0xb8>)
 8005a44:	54d1      	strb	r1, [r2, r3]
 8005a46:	e01d      	b.n	8005a84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	88bb      	ldrh	r3, [r7, #4]
 8005a4c:	08db      	lsrs	r3, r3, #3
 8005a4e:	b298      	uxth	r0, r3
 8005a50:	4603      	mov	r3, r0
 8005a52:	01db      	lsls	r3, r3, #7
 8005a54:	4413      	add	r3, r2
 8005a56:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <SSD1306_DrawPixel+0xb8>)
 8005a58:	5cd3      	ldrb	r3, [r2, r3]
 8005a5a:	b25a      	sxtb	r2, r3
 8005a5c:	88bb      	ldrh	r3, [r7, #4]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	2101      	movs	r1, #1
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	4013      	ands	r3, r2
 8005a70:	b259      	sxtb	r1, r3
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	4603      	mov	r3, r0
 8005a76:	01db      	lsls	r3, r3, #7
 8005a78:	4413      	add	r3, r2
 8005a7a:	b2c9      	uxtb	r1, r1
 8005a7c:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <SSD1306_DrawPixel+0xb8>)
 8005a7e:	54d1      	strb	r1, [r2, r3]
 8005a80:	e000      	b.n	8005a84 <SSD1306_DrawPixel+0xac>
		return;
 8005a82:	bf00      	nop
	}
}
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	20002094 	.word	0x20002094
 8005a90:	20001c94 	.word	0x20001c94

08005a94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	460a      	mov	r2, r1
 8005a9e:	80fb      	strh	r3, [r7, #6]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005aa4:	4a05      	ldr	r2, [pc, #20]	; (8005abc <SSD1306_GotoXY+0x28>)
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005aaa:	4a04      	ldr	r2, [pc, #16]	; (8005abc <SSD1306_GotoXY+0x28>)
 8005aac:	88bb      	ldrh	r3, [r7, #4]
 8005aae:	8053      	strh	r3, [r2, #2]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20002094 	.word	0x20002094

08005ac0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	71fb      	strb	r3, [r7, #7]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005ad0:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	4413      	add	r3, r2
	if (
 8005adc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ade:	dc07      	bgt.n	8005af0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005ae0:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005ae2:	885b      	ldrh	r3, [r3, #2]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005aec:	2b3f      	cmp	r3, #63	; 0x3f
 8005aee:	dd01      	ble.n	8005af4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	e05e      	b.n	8005bb2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e04b      	b.n	8005b92 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	3b20      	subs	r3, #32
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	7849      	ldrb	r1, [r1, #1]
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	440b      	add	r3, r1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	e030      	b.n	8005b80 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d010      	beq.n	8005b50 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005b2e:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4413      	add	r3, r2
 8005b38:	b298      	uxth	r0, r3
 8005b3a:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005b3c:	885a      	ldrh	r2, [r3, #2]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	4413      	add	r3, r2
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	79ba      	ldrb	r2, [r7, #6]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7ff ff45 	bl	80059d8 <SSD1306_DrawPixel>
 8005b4e:	e014      	b.n	8005b7a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4413      	add	r3, r2
 8005b5a:	b298      	uxth	r0, r3
 8005b5c:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005b5e:	885a      	ldrh	r2, [r3, #2]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	b299      	uxth	r1, r3
 8005b68:	79bb      	ldrb	r3, [r7, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	f7ff ff2f 	bl	80059d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d3c8      	bcc.n	8005b1e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	461a      	mov	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d3ad      	bcc.n	8005afa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005b9e:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005ba0:	881a      	ldrh	r2, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4413      	add	r3, r2
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <SSD1306_Putc+0xfc>)
 8005bae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20002094 	.word	0x20002094

08005bc0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005bce:	e012      	b.n	8005bf6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	79fa      	ldrb	r2, [r7, #7]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff ff71 	bl	8005ac0 <SSD1306_Putc>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461a      	mov	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d002      	beq.n	8005bf0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	e008      	b.n	8005c02 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e8      	bne.n	8005bd0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	781b      	ldrb	r3, [r3, #0]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f7ff feca 	bl	80059a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8005c14:	f7ff fe9a 	bl	800594c <SSD1306_UpdateScreen>
}
 8005c18:	bf00      	nop
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8005c22:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <ssd1306_I2C_Init+0x24>)
 8005c24:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c26:	e002      	b.n	8005c2e <ssd1306_I2C_Init+0x12>
		p--;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f9      	bne.n	8005c28 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr
 8005c40:	0003d090 	.word	0x0003d090

08005c44 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b0c7      	sub	sp, #284	; 0x11c
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8005c52:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8005c56:	600a      	str	r2, [r1, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c5e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005c62:	4622      	mov	r2, r4
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c6a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8005c6e:	4602      	mov	r2, r0
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8005c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c8a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005c98:	e015      	b.n	8005cc6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8005c9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005c9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005ca2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	441a      	add	r2, r3
 8005caa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005cae:	3301      	adds	r3, #1
 8005cb0:	7811      	ldrb	r1, [r2, #0]
 8005cb2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005cb6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8005cba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005cbc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8005cc6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005cd0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005cd4:	8812      	ldrh	r2, [r2, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d8df      	bhi.n	8005c9a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8005cda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cde:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b299      	uxth	r1, r3
 8005ce6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f107 020c 	add.w	r2, r7, #12
 8005cf8:	200a      	movs	r0, #10
 8005cfa:	9000      	str	r0, [sp, #0]
 8005cfc:	4803      	ldr	r0, [pc, #12]	; (8005d0c <ssd1306_I2C_WriteMulti+0xc8>)
 8005cfe:	f001 fee3 	bl	8007ac8 <HAL_I2C_Master_Transmit>
}
 8005d02:	bf00      	nop
 8005d04:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd90      	pop	{r4, r7, pc}
 8005d0c:	2000006c 	.word	0x2000006c

08005d10 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	71bb      	strb	r3, [r7, #6]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8005d22:	79bb      	ldrb	r3, [r7, #6]
 8005d24:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005d26:	797b      	ldrb	r3, [r7, #5]
 8005d28:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	b299      	uxth	r1, r3
 8005d2e:	f107 020c 	add.w	r2, r7, #12
 8005d32:	230a      	movs	r3, #10
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	2302      	movs	r3, #2
 8005d38:	4803      	ldr	r0, [pc, #12]	; (8005d48 <ssd1306_I2C_Write+0x38>)
 8005d3a:	f001 fec5 	bl	8007ac8 <HAL_I2C_Master_Transmit>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2000006c 	.word	0x2000006c

08005d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d52:	4b15      	ldr	r3, [pc, #84]	; (8005da8 <HAL_MspInit+0x5c>)
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <HAL_MspInit+0x5c>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6193      	str	r3, [r2, #24]
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <HAL_MspInit+0x5c>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <HAL_MspInit+0x5c>)
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <HAL_MspInit+0x5c>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	61d3      	str	r3, [r2, #28]
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_MspInit+0x5c>)
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_MspInit+0x60>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	4a04      	ldr	r2, [pc, #16]	; (8005dac <HAL_MspInit+0x60>)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr
 8005da8:	40021000 	.word	0x40021000
 8005dac:	40010000 	.word	0x40010000

08005db0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db8:	f107 0310 	add.w	r3, r7, #16
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a20      	ldr	r2, [pc, #128]	; (8005e4c <HAL_CAN_MspInit+0x9c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d139      	bne.n	8005e44 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005dd0:	4b1f      	ldr	r3, [pc, #124]	; (8005e50 <HAL_CAN_MspInit+0xa0>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_CAN_MspInit+0xa0>)
 8005dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005dda:	61d3      	str	r3, [r2, #28]
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <HAL_CAN_MspInit+0xa0>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de8:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <HAL_CAN_MspInit+0xa0>)
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <HAL_CAN_MspInit+0xa0>)
 8005dee:	f043 0304 	orr.w	r3, r3, #4
 8005df2:	6193      	str	r3, [r2, #24]
 8005df4:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <HAL_CAN_MspInit+0xa0>)
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e0e:	f107 0310 	add.w	r3, r7, #16
 8005e12:	4619      	mov	r1, r3
 8005e14:	480f      	ldr	r0, [pc, #60]	; (8005e54 <HAL_CAN_MspInit+0xa4>)
 8005e16:	f001 fb47 	bl	80074a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e20:	2302      	movs	r3, #2
 8005e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e24:	2303      	movs	r3, #3
 8005e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4809      	ldr	r0, [pc, #36]	; (8005e54 <HAL_CAN_MspInit+0xa4>)
 8005e30:	f001 fb3a 	bl	80074a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005e34:	2200      	movs	r2, #0
 8005e36:	2100      	movs	r1, #0
 8005e38:	2014      	movs	r0, #20
 8005e3a:	f001 f8f4 	bl	8007026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005e3e:	2014      	movs	r0, #20
 8005e40:	f001 f90d 	bl	800705e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005e44:	bf00      	nop
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40006400 	.word	0x40006400
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40010800 	.word	0x40010800

08005e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <HAL_I2C_MspInit+0x70>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d123      	bne.n	8005ec0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <HAL_I2C_MspInit+0x74>)
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <HAL_I2C_MspInit+0x74>)
 8005e7e:	f043 0308 	orr.w	r3, r3, #8
 8005e82:	6193      	str	r3, [r2, #24]
 8005e84:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_I2C_MspInit+0x74>)
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e90:	23c0      	movs	r3, #192	; 0xc0
 8005e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e94:	2312      	movs	r3, #18
 8005e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e9c:	f107 0310 	add.w	r3, r7, #16
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	480b      	ldr	r0, [pc, #44]	; (8005ed0 <HAL_I2C_MspInit+0x78>)
 8005ea4:	f001 fb00 	bl	80074a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_I2C_MspInit+0x74>)
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <HAL_I2C_MspInit+0x74>)
 8005eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eb2:	61d3      	str	r3, [r2, #28]
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_I2C_MspInit+0x74>)
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ec0:	bf00      	nop
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40005400 	.word	0x40005400
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40010c00 	.word	0x40010c00

08005ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ed8:	e7fe      	b.n	8005ed8 <NMI_Handler+0x4>

08005eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ede:	e7fe      	b.n	8005ede <HardFault_Handler+0x4>

08005ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ee4:	e7fe      	b.n	8005ee4 <MemManage_Handler+0x4>

08005ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005eea:	e7fe      	b.n	8005eea <BusFault_Handler+0x4>

08005eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ef0:	e7fe      	b.n	8005ef0 <UsageFault_Handler+0x4>

08005ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr

08005efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr

08005f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr
	...

08005f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	/* Toggle APP Status LED */
	  APP_TOGGLE_STATUS_LED();
 8005f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f20:	4803      	ldr	r0, [pc, #12]	; (8005f30 <SysTick_Handler+0x18>)
 8005f22:	f001 fc74 	bl	800780e <HAL_GPIO_TogglePin>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f26:	f000 f8f3 	bl	8006110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40011000 	.word	0x40011000

08005f34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8005f38:	4802      	ldr	r0, [pc, #8]	; (8005f44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8005f3a:	f000 fd7a 	bl	8006a32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000044 	.word	0x20000044

08005f48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <SystemCoreClockUpdate+0xd0>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f003 030c 	and.w	r3, r3, #12
 8005f6e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d011      	beq.n	8005f9a <SystemCoreClockUpdate+0x46>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d83a      	bhi.n	8005ff2 <SystemCoreClockUpdate+0x9e>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <SystemCoreClockUpdate+0x36>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d004      	beq.n	8005f92 <SystemCoreClockUpdate+0x3e>
 8005f88:	e033      	b.n	8005ff2 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8005f8c:	4a27      	ldr	r2, [pc, #156]	; (800602c <SystemCoreClockUpdate+0xd8>)
 8005f8e:	601a      	str	r2, [r3, #0]
      break;
 8005f90:	e033      	b.n	8005ffa <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8005f92:	4b25      	ldr	r3, [pc, #148]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8005f94:	4a25      	ldr	r2, [pc, #148]	; (800602c <SystemCoreClockUpdate+0xd8>)
 8005f96:	601a      	str	r2, [r3, #0]
      break;
 8005f98:	e02f      	b.n	8005ffa <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8005f9a:	4b22      	ldr	r3, [pc, #136]	; (8006024 <SystemCoreClockUpdate+0xd0>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005fa2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005fa4:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <SystemCoreClockUpdate+0xd0>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fac:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	0c9b      	lsrs	r3, r3, #18
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <SystemCoreClockUpdate+0xdc>)
 8005fc0:	fb02 f303 	mul.w	r3, r2, r3
 8005fc4:	4a18      	ldr	r2, [pc, #96]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8005fc6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8005fc8:	e017      	b.n	8005ffa <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8005fca:	4b16      	ldr	r3, [pc, #88]	; (8006024 <SystemCoreClockUpdate+0xd0>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a15      	ldr	r2, [pc, #84]	; (8006030 <SystemCoreClockUpdate+0xdc>)
 8005fda:	fb02 f303 	mul.w	r3, r2, r3
 8005fde:	4a12      	ldr	r2, [pc, #72]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8005fe0:	6013      	str	r3, [r2, #0]
      break;
 8005fe2:	e00a      	b.n	8005ffa <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <SystemCoreClockUpdate+0xd8>)
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
 8005fec:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8005fee:	6013      	str	r3, [r2, #0]
      break;
 8005ff0:	e003      	b.n	8005ffa <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8005ff4:	4a0d      	ldr	r2, [pc, #52]	; (800602c <SystemCoreClockUpdate+0xd8>)
 8005ff6:	601a      	str	r2, [r3, #0]
      break;
 8005ff8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <SystemCoreClockUpdate+0xd0>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <SystemCoreClockUpdate+0xe0>)
 8006006:	5cd3      	ldrb	r3, [r2, r3]
 8006008:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800600a:	4b07      	ldr	r3, [pc, #28]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
 8006014:	4a04      	ldr	r2, [pc, #16]	; (8006028 <SystemCoreClockUpdate+0xd4>)
 8006016:	6013      	str	r3, [r2, #0]
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	20000008 	.word	0x20000008
 800602c:	007a1200 	.word	0x007a1200
 8006030:	003d0900 	.word	0x003d0900
 8006034:	08009510 	.word	0x08009510

08006038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006038:	f7ff ff86 	bl	8005f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800603c:	480b      	ldr	r0, [pc, #44]	; (800606c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800603e:	490c      	ldr	r1, [pc, #48]	; (8006070 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006040:	4a0c      	ldr	r2, [pc, #48]	; (8006074 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006044:	e002      	b.n	800604c <LoopCopyDataInit>

08006046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800604a:	3304      	adds	r3, #4

0800604c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800604c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800604e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006050:	d3f9      	bcc.n	8006046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006054:	4c09      	ldr	r4, [pc, #36]	; (800607c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006058:	e001      	b.n	800605e <LoopFillZerobss>

0800605a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800605a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800605c:	3204      	adds	r2, #4

0800605e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800605e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006060:	d3fb      	bcc.n	800605a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006062:	f002 fdbb 	bl	8008bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006066:	f7ff f81d 	bl	80050a4 <main>
  bx lr
 800606a:	4770      	bx	lr
  ldr r0, =_sdata
 800606c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006070:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8006074:	08009544 	.word	0x08009544
  ldr r2, =_sbss
 8006078:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800607c:	200020c0 	.word	0x200020c0

08006080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006080:	e7fe      	b.n	8006080 <ADC1_2_IRQHandler>
	...

08006084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006088:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_Init+0x28>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a07      	ldr	r2, [pc, #28]	; (80060ac <HAL_Init+0x28>)
 800608e:	f043 0310 	orr.w	r3, r3, #16
 8006092:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006094:	2003      	movs	r0, #3
 8006096:	f000 ffbb 	bl	8007010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800609a:	200f      	movs	r0, #15
 800609c:	f000 f808 	bl	80060b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060a0:	f7ff fe54 	bl	8005d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40022000 	.word	0x40022000

080060b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060b8:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_InitTick+0x54>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <HAL_InitTick+0x58>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 ffd3 	bl	800707a <HAL_SYSTICK_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e00e      	b.n	80060fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b0f      	cmp	r3, #15
 80060e2:	d80a      	bhi.n	80060fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060e4:	2200      	movs	r2, #0
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ec:	f000 ff9b 	bl	8007026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060f0:	4a06      	ldr	r2, [pc, #24]	; (800610c <HAL_InitTick+0x5c>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e000      	b.n	80060fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000008 	.word	0x20000008
 8006108:	20000010 	.word	0x20000010
 800610c:	2000000c 	.word	0x2000000c

08006110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_IncTick+0x1c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <HAL_IncTick+0x20>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4413      	add	r3, r2
 8006120:	4a03      	ldr	r2, [pc, #12]	; (8006130 <HAL_IncTick+0x20>)
 8006122:	6013      	str	r3, [r2, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	20000010 	.word	0x20000010
 8006130:	2000209c 	.word	0x2000209c

08006134 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return uwTick;
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <HAL_GetTick+0x10>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	2000209c 	.word	0x2000209c

08006148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006150:	f7ff fff0 	bl	8006134 <HAL_GetTick>
 8006154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d005      	beq.n	800616e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <HAL_Delay+0x44>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800616e:	bf00      	nop
 8006170:	f7ff ffe0 	bl	8006134 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	429a      	cmp	r2, r3
 800617e:	d8f7      	bhi.n	8006170 <HAL_Delay+0x28>
  {
  }
}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000010 	.word	0x20000010

08006190 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0ed      	b.n	800637e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fdfe 	bl	8005db0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061c4:	f7ff ffb6 	bl	8006134 <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061ca:	e012      	b.n	80061f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061cc:	f7ff ffb2 	bl	8006134 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b0a      	cmp	r3, #10
 80061d8:	d90b      	bls.n	80061f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2205      	movs	r2, #5
 80061ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0c5      	b.n	800637e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0e5      	beq.n	80061cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0202 	bic.w	r2, r2, #2
 800620e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006210:	f7ff ff90 	bl	8006134 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006216:	e012      	b.n	800623e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006218:	f7ff ff8c 	bl	8006134 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b0a      	cmp	r3, #10
 8006224:	d90b      	bls.n	800623e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2205      	movs	r2, #5
 8006236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e09f      	b.n	800637e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7e1b      	ldrb	r3, [r3, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d108      	bne.n	8006266 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e007      	b.n	8006276 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	7e5b      	ldrb	r3, [r3, #25]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d108      	bne.n	8006290 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e007      	b.n	80062a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7e9b      	ldrb	r3, [r3, #26]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d108      	bne.n	80062ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0220 	orr.w	r2, r2, #32
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e007      	b.n	80062ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0220 	bic.w	r2, r2, #32
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7edb      	ldrb	r3, [r3, #27]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d108      	bne.n	80062e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0210 	bic.w	r2, r2, #16
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e007      	b.n	80062f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0210 	orr.w	r2, r2, #16
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7f1b      	ldrb	r3, [r3, #28]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d108      	bne.n	800630e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0208 	orr.w	r2, r2, #8
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e007      	b.n	800631e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0208 	bic.w	r2, r2, #8
 800631c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7f5b      	ldrb	r3, [r3, #29]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d108      	bne.n	8006338 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0204 	orr.w	r2, r2, #4
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e007      	b.n	8006348 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0204 	bic.w	r2, r2, #4
 8006346:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	ea42 0103 	orr.w	r1, r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800639c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800639e:	7cfb      	ldrb	r3, [r7, #19]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d003      	beq.n	80063ac <HAL_CAN_ConfigFilter+0x26>
 80063a4:	7cfb      	ldrb	r3, [r7, #19]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	f040 80aa 	bne.w	8006500 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063b2:	f043 0201 	orr.w	r2, r3, #1
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2201      	movs	r2, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d123      	bne.n	800642e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	43db      	mvns	r3, r3
 80063f0:	401a      	ands	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006408:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	3248      	adds	r2, #72	; 0x48
 800640e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006422:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006424:	6979      	ldr	r1, [r7, #20]
 8006426:	3348      	adds	r3, #72	; 0x48
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	440b      	add	r3, r1
 800642c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d122      	bne.n	800647c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	431a      	orrs	r2, r3
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006456:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3248      	adds	r2, #72	; 0x48
 800645c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006470:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006472:	6979      	ldr	r1, [r7, #20]
 8006474:	3348      	adds	r3, #72	; 0x48
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	440b      	add	r3, r1
 800647a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006496:	e007      	b.n	80064a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80064c2:	e007      	b.n	80064d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d107      	bne.n	80064ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e006      	b.n	800650e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d12e      	bne.n	800658a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006544:	f7ff fdf6 	bl	8006134 <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800654a:	e012      	b.n	8006572 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800654c:	f7ff fdf2 	bl	8006134 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b0a      	cmp	r3, #10
 8006558:	d90b      	bls.n	8006572 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2205      	movs	r2, #5
 800656a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e012      	b.n	8006598 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e006      	b.n	8006598 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
  }
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b089      	sub	sp, #36	; 0x24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80065be:	7ffb      	ldrb	r3, [r7, #31]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d003      	beq.n	80065cc <HAL_CAN_AddTxMessage+0x2c>
 80065c4:	7ffb      	ldrb	r3, [r7, #31]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	f040 80ad 	bne.w	8006726 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 8095 	beq.w	8006716 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	0e1b      	lsrs	r3, r3, #24
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80065f6:	2201      	movs	r2, #1
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	409a      	lsls	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10d      	bne.n	8006624 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	6809      	ldr	r1, [r1, #0]
 8006616:	431a      	orrs	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3318      	adds	r3, #24
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	440b      	add	r3, r1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e00f      	b.n	8006644 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800662e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006634:	68f9      	ldr	r1, [r7, #12]
 8006636:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006638:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3318      	adds	r3, #24
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	440b      	add	r3, r1
 8006642:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6819      	ldr	r1, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3318      	adds	r3, #24
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	440b      	add	r3, r1
 8006654:	3304      	adds	r3, #4
 8006656:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	7d1b      	ldrb	r3, [r3, #20]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d111      	bne.n	8006684 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	3318      	adds	r3, #24
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	4413      	add	r3, r2
 800666c:	3304      	adds	r3, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	6811      	ldr	r1, [r2, #0]
 8006674:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3318      	adds	r3, #24
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	440b      	add	r3, r1
 8006680:	3304      	adds	r3, #4
 8006682:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3307      	adds	r3, #7
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	061a      	lsls	r2, r3, #24
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3306      	adds	r3, #6
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3305      	adds	r3, #5
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	4313      	orrs	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	3204      	adds	r2, #4
 80066a4:	7812      	ldrb	r2, [r2, #0]
 80066a6:	4610      	mov	r0, r2
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	6811      	ldr	r1, [r2, #0]
 80066ac:	ea43 0200 	orr.w	r2, r3, r0
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80066ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3303      	adds	r3, #3
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	061a      	lsls	r2, r3, #24
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3302      	adds	r3, #2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	041b      	lsls	r3, r3, #16
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3301      	adds	r3, #1
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	4313      	orrs	r3, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	4610      	mov	r0, r2
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	6811      	ldr	r1, [r2, #0]
 80066e2:	ea43 0200 	orr.w	r2, r3, r0
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	440b      	add	r3, r1
 80066ec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80066f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	3318      	adds	r3, #24
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	4413      	add	r3, r2
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	6811      	ldr	r1, [r2, #0]
 8006704:	f043 0201 	orr.w	r2, r3, #1
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	3318      	adds	r3, #24
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	440b      	add	r3, r1
 8006710:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	e00e      	b.n	8006734 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e006      	b.n	8006734 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3724      	adds	r7, #36	; 0x24
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr

0800673e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006750:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006752:	7afb      	ldrb	r3, [r7, #11]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d002      	beq.n	800675e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d11d      	bne.n	800679a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800679a:	68fb      	ldr	r3, [r7, #12]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80067a6:	b480      	push	{r7}
 80067a8:	b087      	sub	sp, #28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d003      	beq.n	80067ca <HAL_CAN_GetRxMessage+0x24>
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	f040 8103 	bne.w	80069d0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10e      	bne.n	80067ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d116      	bne.n	800680c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0f7      	b.n	80069de <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d107      	bne.n	800680c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0e8      	b.n	80069de <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	331b      	adds	r3, #27
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4413      	add	r3, r2
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0204 	and.w	r2, r3, #4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10c      	bne.n	8006844 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	331b      	adds	r3, #27
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	4413      	add	r3, r2
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	0d5b      	lsrs	r3, r3, #21
 800683a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e00b      	b.n	800685c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	331b      	adds	r3, #27
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	4413      	add	r3, r2
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	08db      	lsrs	r3, r3, #3
 8006854:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	331b      	adds	r3, #27
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	4413      	add	r3, r2
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0202 	and.w	r2, r3, #2
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	331b      	adds	r3, #27
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	4413      	add	r3, r2
 800687e:	3304      	adds	r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2208      	movs	r2, #8
 800688e:	611a      	str	r2, [r3, #16]
 8006890:	e00b      	b.n	80068aa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	331b      	adds	r3, #27
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	4413      	add	r3, r2
 800689e:	3304      	adds	r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 020f 	and.w	r2, r3, #15
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	331b      	adds	r3, #27
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	4413      	add	r3, r2
 80068b6:	3304      	adds	r3, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	331b      	adds	r3, #27
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4413      	add	r3, r2
 80068ce:	3304      	adds	r3, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	0a1a      	lsrs	r2, r3, #8
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4413      	add	r3, r2
 8006914:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	0c1a      	lsrs	r2, r3, #16
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	3302      	adds	r3, #2
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	4413      	add	r3, r2
 800692e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	0e1a      	lsrs	r2, r3, #24
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	3303      	adds	r3, #3
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	4413      	add	r3, r2
 8006948:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	3304      	adds	r3, #4
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	4413      	add	r3, r2
 8006960:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	0a1a      	lsrs	r2, r3, #8
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	3305      	adds	r3, #5
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4413      	add	r3, r2
 800697a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	0c1a      	lsrs	r2, r3, #16
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	3306      	adds	r3, #6
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	4413      	add	r3, r2
 8006994:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	0e1a      	lsrs	r2, r3, #24
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	3307      	adds	r3, #7
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d108      	bne.n	80069bc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0220 	orr.w	r2, r2, #32
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	e007      	b.n	80069cc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0220 	orr.w	r2, r2, #32
 80069ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e006      	b.n	80069de <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d002      	beq.n	8006a06 <HAL_CAN_ActivateNotification+0x1e>
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d109      	bne.n	8006a1a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6959      	ldr	r1, [r3, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e006      	b.n	8006a28 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d07c      	beq.n	8006b72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d023      	beq.n	8006aca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2201      	movs	r2, #1
 8006a88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f983 	bl	8006da0 <HAL_CAN_TxMailbox0CompleteCallback>
 8006a9a:	e016      	b.n	8006aca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	e00c      	b.n	8006aca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac2:	e002      	b.n	8006aca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f986 	bl	8006dd6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d024      	beq.n	8006b1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006adc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f962 	bl	8006db2 <HAL_CAN_TxMailbox1CompleteCallback>
 8006aee:	e016      	b.n	8006b1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d004      	beq.n	8006b04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
 8006b02:	e00c      	b.n	8006b1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
 8006b16:	e002      	b.n	8006b1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f965 	bl	8006de8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d024      	beq.n	8006b72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f941 	bl	8006dc4 <HAL_CAN_TxMailbox2CompleteCallback>
 8006b42:	e016      	b.n	8006b72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	e00c      	b.n	8006b72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6a:	e002      	b.n	8006b72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f944 	bl	8006dfa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2210      	movs	r2, #16
 8006b94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d006      	beq.n	8006bb8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2208      	movs	r2, #8
 8006bb0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f92a 	bl	8006e0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0303 	and.w	r3, r3, #3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7fe f9c9 	bl	8004f68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00c      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d007      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2208      	movs	r2, #8
 8006c14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f90a 	bl	8006e30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	f003 0310 	and.w	r3, r3, #16
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8f2 	bl	8006e1e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d006      	beq.n	8006c5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2210      	movs	r2, #16
 8006c54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8f3 	bl	8006e42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2208      	movs	r2, #8
 8006c76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f8eb 	bl	8006e54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d07b      	beq.n	8006d80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d072      	beq.n	8006d78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	f043 0304 	orr.w	r3, r3, #4
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d043      	beq.n	8006d78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d03e      	beq.n	8006d78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d00:	2b60      	cmp	r3, #96	; 0x60
 8006d02:	d02b      	beq.n	8006d5c <HAL_CAN_IRQHandler+0x32a>
 8006d04:	2b60      	cmp	r3, #96	; 0x60
 8006d06:	d82e      	bhi.n	8006d66 <HAL_CAN_IRQHandler+0x334>
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d022      	beq.n	8006d52 <HAL_CAN_IRQHandler+0x320>
 8006d0c:	2b50      	cmp	r3, #80	; 0x50
 8006d0e:	d82a      	bhi.n	8006d66 <HAL_CAN_IRQHandler+0x334>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d019      	beq.n	8006d48 <HAL_CAN_IRQHandler+0x316>
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d826      	bhi.n	8006d66 <HAL_CAN_IRQHandler+0x334>
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d010      	beq.n	8006d3e <HAL_CAN_IRQHandler+0x30c>
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d822      	bhi.n	8006d66 <HAL_CAN_IRQHandler+0x334>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d002      	beq.n	8006d2a <HAL_CAN_IRQHandler+0x2f8>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d005      	beq.n	8006d34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006d28:	e01d      	b.n	8006d66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	f043 0308 	orr.w	r3, r3, #8
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d32:	e019      	b.n	8006d68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	f043 0310 	orr.w	r3, r3, #16
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d3c:	e014      	b.n	8006d68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	f043 0320 	orr.w	r3, r3, #32
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d46:	e00f      	b.n	8006d68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d50:	e00a      	b.n	8006d68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d5a:	e005      	b.n	8006d68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d64:	e000      	b.n	8006d68 <HAL_CAN_IRQHandler+0x336>
            break;
 8006d66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f867 	bl	8006e66 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr

08006de8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr

08006e0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr

08006e66 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <__NVIC_SetPriorityGrouping>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <__NVIC_SetPriorityGrouping+0x44>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e94:	4013      	ands	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006eaa:	4a04      	ldr	r2, [pc, #16]	; (8006ebc <__NVIC_SetPriorityGrouping+0x44>)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	60d3      	str	r3, [r2, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	e000ed00 	.word	0xe000ed00

08006ec0 <__NVIC_GetPriorityGrouping>:
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	f003 0307 	and.w	r3, r3, #7
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <__NVIC_EnableIRQ>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db0b      	blt.n	8006f06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	f003 021f 	and.w	r2, r3, #31
 8006ef4:	4906      	ldr	r1, [pc, #24]	; (8006f10 <__NVIC_EnableIRQ+0x34>)
 8006ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	2001      	movs	r0, #1
 8006efe:	fa00 f202 	lsl.w	r2, r0, r2
 8006f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr
 8006f10:	e000e100 	.word	0xe000e100

08006f14 <__NVIC_SetPriority>:
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	db0a      	blt.n	8006f3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	490c      	ldr	r1, [pc, #48]	; (8006f60 <__NVIC_SetPriority+0x4c>)
 8006f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f32:	0112      	lsls	r2, r2, #4
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	440b      	add	r3, r1
 8006f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f3c:	e00a      	b.n	8006f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	4908      	ldr	r1, [pc, #32]	; (8006f64 <__NVIC_SetPriority+0x50>)
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	3b04      	subs	r3, #4
 8006f4c:	0112      	lsls	r2, r2, #4
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	440b      	add	r3, r1
 8006f52:	761a      	strb	r2, [r3, #24]
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	e000e100 	.word	0xe000e100
 8006f64:	e000ed00 	.word	0xe000ed00

08006f68 <NVIC_EncodePriority>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b089      	sub	sp, #36	; 0x24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f1c3 0307 	rsb	r3, r3, #7
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	bf28      	it	cs
 8006f86:	2304      	movcs	r3, #4
 8006f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	2b06      	cmp	r3, #6
 8006f90:	d902      	bls.n	8006f98 <NVIC_EncodePriority+0x30>
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	3b03      	subs	r3, #3
 8006f96:	e000      	b.n	8006f9a <NVIC_EncodePriority+0x32>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	43da      	mvns	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	401a      	ands	r2, r3
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fba:	43d9      	mvns	r1, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc0:	4313      	orrs	r3, r2
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3724      	adds	r7, #36	; 0x24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <SysTick_Config>:
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fdc:	d301      	bcc.n	8006fe2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e00f      	b.n	8007002 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fe2:	4a0a      	ldr	r2, [pc, #40]	; (800700c <SysTick_Config+0x40>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fea:	210f      	movs	r1, #15
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	f7ff ff90 	bl	8006f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <SysTick_Config+0x40>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ffa:	4b04      	ldr	r3, [pc, #16]	; (800700c <SysTick_Config+0x40>)
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	e000e010 	.word	0xe000e010

08007010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ff2d 	bl	8006e78 <__NVIC_SetPriorityGrouping>
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	4603      	mov	r3, r0
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007038:	f7ff ff42 	bl	8006ec0 <__NVIC_GetPriorityGrouping>
 800703c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	6978      	ldr	r0, [r7, #20]
 8007044:	f7ff ff90 	bl	8006f68 <NVIC_EncodePriority>
 8007048:	4602      	mov	r2, r0
 800704a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff ff5f 	bl	8006f14 <__NVIC_SetPriority>
}
 8007056:	bf00      	nop
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	4603      	mov	r3, r0
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ff35 	bl	8006edc <__NVIC_EnableIRQ>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ffa2 	bl	8006fcc <SysTick_Config>
 8007088:	4603      	mov	r3, r0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80070ae:	4b2f      	ldr	r3, [pc, #188]	; (800716c <HAL_FLASH_Program+0xd8>)
 80070b0:	7e1b      	ldrb	r3, [r3, #24]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_FLASH_Program+0x26>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e054      	b.n	8007164 <HAL_FLASH_Program+0xd0>
 80070ba:	4b2c      	ldr	r3, [pc, #176]	; (800716c <HAL_FLASH_Program+0xd8>)
 80070bc:	2201      	movs	r2, #1
 80070be:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80070c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80070c4:	f000 f8b2 	bl	800722c <FLASH_WaitForLastOperation>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d144      	bne.n	800715c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d102      	bne.n	80070de <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80070d8:	2301      	movs	r3, #1
 80070da:	757b      	strb	r3, [r7, #21]
 80070dc:	e007      	b.n	80070ee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d102      	bne.n	80070ea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80070e4:	2302      	movs	r3, #2
 80070e6:	757b      	strb	r3, [r7, #21]
 80070e8:	e001      	b.n	80070ee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80070ea:	2304      	movs	r3, #4
 80070ec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	75bb      	strb	r3, [r7, #22]
 80070f2:	e02d      	b.n	8007150 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80070f4:	7dbb      	ldrb	r3, [r7, #22]
 80070f6:	005a      	lsls	r2, r3, #1
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	eb02 0c03 	add.w	ip, r2, r3
 80070fe:	7dbb      	ldrb	r3, [r7, #22]
 8007100:	0119      	lsls	r1, r3, #4
 8007102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007106:	f1c1 0620 	rsb	r6, r1, #32
 800710a:	f1a1 0020 	sub.w	r0, r1, #32
 800710e:	fa22 f401 	lsr.w	r4, r2, r1
 8007112:	fa03 f606 	lsl.w	r6, r3, r6
 8007116:	4334      	orrs	r4, r6
 8007118:	fa23 f000 	lsr.w	r0, r3, r0
 800711c:	4304      	orrs	r4, r0
 800711e:	fa23 f501 	lsr.w	r5, r3, r1
 8007122:	b2a3      	uxth	r3, r4
 8007124:	4619      	mov	r1, r3
 8007126:	4660      	mov	r0, ip
 8007128:	f000 f864 	bl	80071f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800712c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007130:	f000 f87c 	bl	800722c <FLASH_WaitForLastOperation>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007138:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <HAL_FLASH_Program+0xdc>)
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <HAL_FLASH_Program+0xdc>)
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d107      	bne.n	800715a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800714a:	7dbb      	ldrb	r3, [r7, #22]
 800714c:	3301      	adds	r3, #1
 800714e:	75bb      	strb	r3, [r7, #22]
 8007150:	7dba      	ldrb	r2, [r7, #22]
 8007152:	7d7b      	ldrb	r3, [r7, #21]
 8007154:	429a      	cmp	r2, r3
 8007156:	d3cd      	bcc.n	80070f4 <HAL_FLASH_Program+0x60>
 8007158:	e000      	b.n	800715c <HAL_FLASH_Program+0xc8>
      {
        break;
 800715a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800715c:	4b03      	ldr	r3, [pc, #12]	; (800716c <HAL_FLASH_Program+0xd8>)
 800715e:	2200      	movs	r2, #0
 8007160:	761a      	strb	r2, [r3, #24]

  return status;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716c:	200020a0 	.word	0x200020a0
 8007170:	40022000 	.word	0x40022000

08007174 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800717e:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <HAL_FLASH_Unlock+0x40>)
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00d      	beq.n	80071a6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800718a:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <HAL_FLASH_Unlock+0x40>)
 800718c:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <HAL_FLASH_Unlock+0x44>)
 800718e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007190:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <HAL_FLASH_Unlock+0x40>)
 8007192:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <HAL_FLASH_Unlock+0x48>)
 8007194:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007196:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <HAL_FLASH_Unlock+0x40>)
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80071a6:	79fb      	ldrb	r3, [r7, #7]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40022000 	.word	0x40022000
 80071b8:	45670123 	.word	0x45670123
 80071bc:	cdef89ab 	.word	0xcdef89ab

080071c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <HAL_FLASH_Lock+0x1c>)
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	4a04      	ldr	r2, [pc, #16]	; (80071dc <HAL_FLASH_Lock+0x1c>)
 80071ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40022000 	.word	0x40022000

080071e0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <HAL_FLASH_GetError+0x10>)
 80071e6:	69db      	ldr	r3, [r3, #28]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr
 80071f0:	200020a0 	.word	0x200020a0

080071f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <FLASH_Program_HalfWord+0x30>)
 8007202:	2200      	movs	r2, #0
 8007204:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007206:	4b08      	ldr	r3, [pc, #32]	; (8007228 <FLASH_Program_HalfWord+0x34>)
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	4a07      	ldr	r2, [pc, #28]	; (8007228 <FLASH_Program_HalfWord+0x34>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	887a      	ldrh	r2, [r7, #2]
 8007216:	801a      	strh	r2, [r3, #0]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	200020a0 	.word	0x200020a0
 8007228:	40022000 	.word	0x40022000

0800722c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007234:	f7fe ff7e 	bl	8006134 <HAL_GetTick>
 8007238:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800723a:	e010      	b.n	800725e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d00c      	beq.n	800725e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <FLASH_WaitForLastOperation+0x2e>
 800724a:	f7fe ff73 	bl	8006134 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d201      	bcs.n	800725e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e025      	b.n	80072aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800725e:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <FLASH_WaitForLastOperation+0x88>)
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e8      	bne.n	800723c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <FLASH_WaitForLastOperation+0x88>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007276:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <FLASH_WaitForLastOperation+0x88>)
 8007278:	2220      	movs	r2, #32
 800727a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800727c:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <FLASH_WaitForLastOperation+0x88>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <FLASH_WaitForLastOperation+0x88>)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <FLASH_WaitForLastOperation+0x88>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80072a0:	f000 f80a 	bl	80072b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40022000 	.word	0x40022000

080072b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80072c2:	4b23      	ldr	r3, [pc, #140]	; (8007350 <FLASH_SetErrorCode+0x98>)
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0310 	and.w	r3, r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80072ce:	4b21      	ldr	r3, [pc, #132]	; (8007354 <FLASH_SetErrorCode+0x9c>)
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f043 0302 	orr.w	r3, r3, #2
 80072d6:	4a1f      	ldr	r2, [pc, #124]	; (8007354 <FLASH_SetErrorCode+0x9c>)
 80072d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f043 0310 	orr.w	r3, r3, #16
 80072e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80072e2:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <FLASH_SetErrorCode+0x98>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80072ee:	4b19      	ldr	r3, [pc, #100]	; (8007354 <FLASH_SetErrorCode+0x9c>)
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	4a17      	ldr	r2, [pc, #92]	; (8007354 <FLASH_SetErrorCode+0x9c>)
 80072f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f043 0304 	orr.w	r3, r3, #4
 8007300:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <FLASH_SetErrorCode+0x98>)
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <FLASH_SetErrorCode+0x9c>)
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f043 0304 	orr.w	r3, r3, #4
 8007316:	4a0f      	ldr	r2, [pc, #60]	; (8007354 <FLASH_SetErrorCode+0x9c>)
 8007318:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800731a:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <FLASH_SetErrorCode+0x98>)
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <FLASH_SetErrorCode+0x98>)
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f240 1201 	movw	r2, #257	; 0x101
 800732c:	4293      	cmp	r3, r2
 800732e:	d106      	bne.n	800733e <FLASH_SetErrorCode+0x86>
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <FLASH_SetErrorCode+0x98>)
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	4a06      	ldr	r2, [pc, #24]	; (8007350 <FLASH_SetErrorCode+0x98>)
 8007336:	f023 0301 	bic.w	r3, r3, #1
 800733a:	61d3      	str	r3, [r2, #28]
}  
 800733c:	e002      	b.n	8007344 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800733e:	4a04      	ldr	r2, [pc, #16]	; (8007350 <FLASH_SetErrorCode+0x98>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60d3      	str	r3, [r2, #12]
}  
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40022000 	.word	0x40022000
 8007354:	200020a0 	.word	0x200020a0

08007358 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800736a:	4b2f      	ldr	r3, [pc, #188]	; (8007428 <HAL_FLASHEx_Erase+0xd0>)
 800736c:	7e1b      	ldrb	r3, [r3, #24]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_FLASHEx_Erase+0x1e>
 8007372:	2302      	movs	r3, #2
 8007374:	e053      	b.n	800741e <HAL_FLASHEx_Erase+0xc6>
 8007376:	4b2c      	ldr	r3, [pc, #176]	; (8007428 <HAL_FLASHEx_Erase+0xd0>)
 8007378:	2201      	movs	r2, #1
 800737a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d116      	bne.n	80073b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007384:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007388:	f7ff ff50 	bl	800722c <FLASH_WaitForLastOperation>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d141      	bne.n	8007416 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8007392:	2001      	movs	r0, #1
 8007394:	f000 f84c 	bl	8007430 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007398:	f24c 3050 	movw	r0, #50000	; 0xc350
 800739c:	f7ff ff46 	bl	800722c <FLASH_WaitForLastOperation>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80073a4:	4b21      	ldr	r3, [pc, #132]	; (800742c <HAL_FLASHEx_Erase+0xd4>)
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	4a20      	ldr	r2, [pc, #128]	; (800742c <HAL_FLASHEx_Erase+0xd4>)
 80073aa:	f023 0304 	bic.w	r3, r3, #4
 80073ae:	6113      	str	r3, [r2, #16]
 80073b0:	e031      	b.n	8007416 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80073b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073b6:	f7ff ff39 	bl	800722c <FLASH_WaitForLastOperation>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d12a      	bne.n	8007416 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f04f 32ff 	mov.w	r2, #4294967295
 80073c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	e019      	b.n	8007404 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80073d0:	68b8      	ldr	r0, [r7, #8]
 80073d2:	f000 f849 	bl	8007468 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073da:	f7ff ff27 	bl	800722c <FLASH_WaitForLastOperation>
 80073de:	4603      	mov	r3, r0
 80073e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <HAL_FLASHEx_Erase+0xd4>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	4a11      	ldr	r2, [pc, #68]	; (800742c <HAL_FLASHEx_Erase+0xd4>)
 80073e8:	f023 0302 	bic.w	r3, r3, #2
 80073ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	601a      	str	r2, [r3, #0]
            break;
 80073fa:	e00c      	b.n	8007416 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007402:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	029a      	lsls	r2, r3, #10
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	4413      	add	r3, r2
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	429a      	cmp	r2, r3
 8007414:	d3dc      	bcc.n	80073d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <HAL_FLASHEx_Erase+0xd0>)
 8007418:	2200      	movs	r2, #0
 800741a:	761a      	strb	r2, [r3, #24]

  return status;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	200020a0 	.word	0x200020a0
 800742c:	40022000 	.word	0x40022000

08007430 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007438:	4b09      	ldr	r3, [pc, #36]	; (8007460 <FLASH_MassErase+0x30>)
 800743a:	2200      	movs	r2, #0
 800743c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <FLASH_MassErase+0x34>)
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	4a08      	ldr	r2, [pc, #32]	; (8007464 <FLASH_MassErase+0x34>)
 8007444:	f043 0304 	orr.w	r3, r3, #4
 8007448:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800744a:	4b06      	ldr	r3, [pc, #24]	; (8007464 <FLASH_MassErase+0x34>)
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	4a05      	ldr	r2, [pc, #20]	; (8007464 <FLASH_MassErase+0x34>)
 8007450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007454:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr
 8007460:	200020a0 	.word	0x200020a0
 8007464:	40022000 	.word	0x40022000

08007468 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <FLASH_PageErase+0x38>)
 8007472:	2200      	movs	r2, #0
 8007474:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007476:	4b0b      	ldr	r3, [pc, #44]	; (80074a4 <FLASH_PageErase+0x3c>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	4a0a      	ldr	r2, [pc, #40]	; (80074a4 <FLASH_PageErase+0x3c>)
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <FLASH_PageErase+0x3c>)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <FLASH_PageErase+0x3c>)
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <FLASH_PageErase+0x3c>)
 800748e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007492:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	200020a0 	.word	0x200020a0
 80074a4:	40022000 	.word	0x40022000

080074a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b08b      	sub	sp, #44	; 0x2c
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80074b2:	2300      	movs	r3, #0
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80074b6:	2300      	movs	r3, #0
 80074b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074ba:	e169      	b.n	8007790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80074bc:	2201      	movs	r2, #1
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	f040 8158 	bne.w	800778a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	4a9a      	ldr	r2, [pc, #616]	; (8007748 <HAL_GPIO_Init+0x2a0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d05e      	beq.n	80075a2 <HAL_GPIO_Init+0xfa>
 80074e4:	4a98      	ldr	r2, [pc, #608]	; (8007748 <HAL_GPIO_Init+0x2a0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d875      	bhi.n	80075d6 <HAL_GPIO_Init+0x12e>
 80074ea:	4a98      	ldr	r2, [pc, #608]	; (800774c <HAL_GPIO_Init+0x2a4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d058      	beq.n	80075a2 <HAL_GPIO_Init+0xfa>
 80074f0:	4a96      	ldr	r2, [pc, #600]	; (800774c <HAL_GPIO_Init+0x2a4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d86f      	bhi.n	80075d6 <HAL_GPIO_Init+0x12e>
 80074f6:	4a96      	ldr	r2, [pc, #600]	; (8007750 <HAL_GPIO_Init+0x2a8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d052      	beq.n	80075a2 <HAL_GPIO_Init+0xfa>
 80074fc:	4a94      	ldr	r2, [pc, #592]	; (8007750 <HAL_GPIO_Init+0x2a8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d869      	bhi.n	80075d6 <HAL_GPIO_Init+0x12e>
 8007502:	4a94      	ldr	r2, [pc, #592]	; (8007754 <HAL_GPIO_Init+0x2ac>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d04c      	beq.n	80075a2 <HAL_GPIO_Init+0xfa>
 8007508:	4a92      	ldr	r2, [pc, #584]	; (8007754 <HAL_GPIO_Init+0x2ac>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d863      	bhi.n	80075d6 <HAL_GPIO_Init+0x12e>
 800750e:	4a92      	ldr	r2, [pc, #584]	; (8007758 <HAL_GPIO_Init+0x2b0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d046      	beq.n	80075a2 <HAL_GPIO_Init+0xfa>
 8007514:	4a90      	ldr	r2, [pc, #576]	; (8007758 <HAL_GPIO_Init+0x2b0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d85d      	bhi.n	80075d6 <HAL_GPIO_Init+0x12e>
 800751a:	2b12      	cmp	r3, #18
 800751c:	d82a      	bhi.n	8007574 <HAL_GPIO_Init+0xcc>
 800751e:	2b12      	cmp	r3, #18
 8007520:	d859      	bhi.n	80075d6 <HAL_GPIO_Init+0x12e>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <HAL_GPIO_Init+0x80>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	080075a3 	.word	0x080075a3
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800758f 	.word	0x0800758f
 8007534:	080075d1 	.word	0x080075d1
 8007538:	080075d7 	.word	0x080075d7
 800753c:	080075d7 	.word	0x080075d7
 8007540:	080075d7 	.word	0x080075d7
 8007544:	080075d7 	.word	0x080075d7
 8007548:	080075d7 	.word	0x080075d7
 800754c:	080075d7 	.word	0x080075d7
 8007550:	080075d7 	.word	0x080075d7
 8007554:	080075d7 	.word	0x080075d7
 8007558:	080075d7 	.word	0x080075d7
 800755c:	080075d7 	.word	0x080075d7
 8007560:	080075d7 	.word	0x080075d7
 8007564:	080075d7 	.word	0x080075d7
 8007568:	080075d7 	.word	0x080075d7
 800756c:	08007585 	.word	0x08007585
 8007570:	08007599 	.word	0x08007599
 8007574:	4a79      	ldr	r2, [pc, #484]	; (800775c <HAL_GPIO_Init+0x2b4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800757a:	e02c      	b.n	80075d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	623b      	str	r3, [r7, #32]
          break;
 8007582:	e029      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	3304      	adds	r3, #4
 800758a:	623b      	str	r3, [r7, #32]
          break;
 800758c:	e024      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	3308      	adds	r3, #8
 8007594:	623b      	str	r3, [r7, #32]
          break;
 8007596:	e01f      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	330c      	adds	r3, #12
 800759e:	623b      	str	r3, [r7, #32]
          break;
 80075a0:	e01a      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d102      	bne.n	80075b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80075aa:	2304      	movs	r3, #4
 80075ac:	623b      	str	r3, [r7, #32]
          break;
 80075ae:	e013      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d105      	bne.n	80075c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075b8:	2308      	movs	r3, #8
 80075ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	611a      	str	r2, [r3, #16]
          break;
 80075c2:	e009      	b.n	80075d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075c4:	2308      	movs	r3, #8
 80075c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	615a      	str	r2, [r3, #20]
          break;
 80075ce:	e003      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80075d0:	2300      	movs	r3, #0
 80075d2:	623b      	str	r3, [r7, #32]
          break;
 80075d4:	e000      	b.n	80075d8 <HAL_GPIO_Init+0x130>
          break;
 80075d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2bff      	cmp	r3, #255	; 0xff
 80075dc:	d801      	bhi.n	80075e2 <HAL_GPIO_Init+0x13a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	e001      	b.n	80075e6 <HAL_GPIO_Init+0x13e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2bff      	cmp	r3, #255	; 0xff
 80075ec:	d802      	bhi.n	80075f4 <HAL_GPIO_Init+0x14c>
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	e002      	b.n	80075fa <HAL_GPIO_Init+0x152>
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	3b08      	subs	r3, #8
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	210f      	movs	r1, #15
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	401a      	ands	r2, r3
 800760c:	6a39      	ldr	r1, [r7, #32]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 80b1 	beq.w	800778a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007628:	4b4d      	ldr	r3, [pc, #308]	; (8007760 <HAL_GPIO_Init+0x2b8>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	4a4c      	ldr	r2, [pc, #304]	; (8007760 <HAL_GPIO_Init+0x2b8>)
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	6193      	str	r3, [r2, #24]
 8007634:	4b4a      	ldr	r3, [pc, #296]	; (8007760 <HAL_GPIO_Init+0x2b8>)
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007640:	4a48      	ldr	r2, [pc, #288]	; (8007764 <HAL_GPIO_Init+0x2bc>)
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	089b      	lsrs	r3, r3, #2
 8007646:	3302      	adds	r3, #2
 8007648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800764c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	220f      	movs	r2, #15
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	43db      	mvns	r3, r3
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4013      	ands	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <HAL_GPIO_Init+0x2c0>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <HAL_GPIO_Init+0x1ec>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a3f      	ldr	r2, [pc, #252]	; (800776c <HAL_GPIO_Init+0x2c4>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00d      	beq.n	8007690 <HAL_GPIO_Init+0x1e8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3e      	ldr	r2, [pc, #248]	; (8007770 <HAL_GPIO_Init+0x2c8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d007      	beq.n	800768c <HAL_GPIO_Init+0x1e4>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3d      	ldr	r2, [pc, #244]	; (8007774 <HAL_GPIO_Init+0x2cc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d101      	bne.n	8007688 <HAL_GPIO_Init+0x1e0>
 8007684:	2303      	movs	r3, #3
 8007686:	e006      	b.n	8007696 <HAL_GPIO_Init+0x1ee>
 8007688:	2304      	movs	r3, #4
 800768a:	e004      	b.n	8007696 <HAL_GPIO_Init+0x1ee>
 800768c:	2302      	movs	r3, #2
 800768e:	e002      	b.n	8007696 <HAL_GPIO_Init+0x1ee>
 8007690:	2301      	movs	r3, #1
 8007692:	e000      	b.n	8007696 <HAL_GPIO_Init+0x1ee>
 8007694:	2300      	movs	r3, #0
 8007696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007698:	f002 0203 	and.w	r2, r2, #3
 800769c:	0092      	lsls	r2, r2, #2
 800769e:	4093      	lsls	r3, r2
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80076a6:	492f      	ldr	r1, [pc, #188]	; (8007764 <HAL_GPIO_Init+0x2bc>)
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	089b      	lsrs	r3, r3, #2
 80076ac:	3302      	adds	r3, #2
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80076c0:	4b2d      	ldr	r3, [pc, #180]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	492c      	ldr	r1, [pc, #176]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	608b      	str	r3, [r1, #8]
 80076cc:	e006      	b.n	80076dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80076ce:	4b2a      	ldr	r3, [pc, #168]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	4928      	ldr	r1, [pc, #160]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076d8:	4013      	ands	r3, r2
 80076da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d006      	beq.n	80076f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80076e8:	4b23      	ldr	r3, [pc, #140]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	4922      	ldr	r1, [pc, #136]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60cb      	str	r3, [r1, #12]
 80076f4:	e006      	b.n	8007704 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80076f6:	4b20      	ldr	r3, [pc, #128]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	43db      	mvns	r3, r3
 80076fe:	491e      	ldr	r1, [pc, #120]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 8007700:	4013      	ands	r3, r2
 8007702:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007710:	4b19      	ldr	r3, [pc, #100]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4918      	ldr	r1, [pc, #96]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	4313      	orrs	r3, r2
 800771a:	604b      	str	r3, [r1, #4]
 800771c:	e006      	b.n	800772c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	43db      	mvns	r3, r3
 8007726:	4914      	ldr	r1, [pc, #80]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 8007728:	4013      	ands	r3, r2
 800772a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d021      	beq.n	800777c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	490e      	ldr	r1, [pc, #56]	; (8007778 <HAL_GPIO_Init+0x2d0>)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	4313      	orrs	r3, r2
 8007742:	600b      	str	r3, [r1, #0]
 8007744:	e021      	b.n	800778a <HAL_GPIO_Init+0x2e2>
 8007746:	bf00      	nop
 8007748:	10320000 	.word	0x10320000
 800774c:	10310000 	.word	0x10310000
 8007750:	10220000 	.word	0x10220000
 8007754:	10210000 	.word	0x10210000
 8007758:	10120000 	.word	0x10120000
 800775c:	10110000 	.word	0x10110000
 8007760:	40021000 	.word	0x40021000
 8007764:	40010000 	.word	0x40010000
 8007768:	40010800 	.word	0x40010800
 800776c:	40010c00 	.word	0x40010c00
 8007770:	40011000 	.word	0x40011000
 8007774:	40011400 	.word	0x40011400
 8007778:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800777c:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_GPIO_Init+0x304>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	43db      	mvns	r3, r3
 8007784:	4909      	ldr	r1, [pc, #36]	; (80077ac <HAL_GPIO_Init+0x304>)
 8007786:	4013      	ands	r3, r2
 8007788:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	3301      	adds	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	fa22 f303 	lsr.w	r3, r2, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	f47f ae8e 	bne.w	80074bc <HAL_GPIO_Init+0x14>
  }
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	372c      	adds	r7, #44	; 0x2c
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr
 80077ac:	40010400 	.word	0x40010400

080077b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	887b      	ldrh	r3, [r7, #2]
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077c8:	2301      	movs	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	e001      	b.n	80077d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	807b      	strh	r3, [r7, #2]
 80077ea:	4613      	mov	r3, r2
 80077ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077ee:	787b      	ldrb	r3, [r7, #1]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077f4:	887a      	ldrh	r2, [r7, #2]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80077fa:	e003      	b.n	8007804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077fc:	887b      	ldrh	r3, [r7, #2]
 80077fe:	041a      	lsls	r2, r3, #16
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	611a      	str	r2, [r3, #16]
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	bc80      	pop	{r7}
 800780c:	4770      	bx	lr

0800780e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007820:	887a      	ldrh	r2, [r7, #2]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4013      	ands	r3, r2
 8007826:	041a      	lsls	r2, r3, #16
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	43d9      	mvns	r1, r3
 800782c:	887b      	ldrh	r3, [r7, #2]
 800782e:	400b      	ands	r3, r1
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	611a      	str	r2, [r3, #16]
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr

08007840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e12b      	b.n	8007aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fe faf6 	bl	8005e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0201 	bic.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078a4:	f001 f960 	bl	8008b68 <HAL_RCC_GetPCLK1Freq>
 80078a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	4a81      	ldr	r2, [pc, #516]	; (8007ab4 <HAL_I2C_Init+0x274>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d807      	bhi.n	80078c4 <HAL_I2C_Init+0x84>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4a80      	ldr	r2, [pc, #512]	; (8007ab8 <HAL_I2C_Init+0x278>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	bf94      	ite	ls
 80078bc:	2301      	movls	r3, #1
 80078be:	2300      	movhi	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	e006      	b.n	80078d2 <HAL_I2C_Init+0x92>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a7d      	ldr	r2, [pc, #500]	; (8007abc <HAL_I2C_Init+0x27c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bf94      	ite	ls
 80078cc:	2301      	movls	r3, #1
 80078ce:	2300      	movhi	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e0e7      	b.n	8007aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a78      	ldr	r2, [pc, #480]	; (8007ac0 <HAL_I2C_Init+0x280>)
 80078de:	fba2 2303 	umull	r2, r3, r2, r3
 80078e2:	0c9b      	lsrs	r3, r3, #18
 80078e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4a6a      	ldr	r2, [pc, #424]	; (8007ab4 <HAL_I2C_Init+0x274>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d802      	bhi.n	8007914 <HAL_I2C_Init+0xd4>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3301      	adds	r3, #1
 8007912:	e009      	b.n	8007928 <HAL_I2C_Init+0xe8>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800791a:	fb02 f303 	mul.w	r3, r2, r3
 800791e:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <HAL_I2C_Init+0x284>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	099b      	lsrs	r3, r3, #6
 8007926:	3301      	adds	r3, #1
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	430b      	orrs	r3, r1
 800792e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800793a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	495c      	ldr	r1, [pc, #368]	; (8007ab4 <HAL_I2C_Init+0x274>)
 8007944:	428b      	cmp	r3, r1
 8007946:	d819      	bhi.n	800797c <HAL_I2C_Init+0x13c>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	1e59      	subs	r1, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	fbb1 f3f3 	udiv	r3, r1, r3
 8007956:	1c59      	adds	r1, r3, #1
 8007958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800795c:	400b      	ands	r3, r1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <HAL_I2C_Init+0x138>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1e59      	subs	r1, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007970:	3301      	adds	r3, #1
 8007972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007976:	e051      	b.n	8007a1c <HAL_I2C_Init+0x1dc>
 8007978:	2304      	movs	r3, #4
 800797a:	e04f      	b.n	8007a1c <HAL_I2C_Init+0x1dc>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d111      	bne.n	80079a8 <HAL_I2C_Init+0x168>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	1e58      	subs	r0, r3, #1
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6859      	ldr	r1, [r3, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	440b      	add	r3, r1
 8007992:	fbb0 f3f3 	udiv	r3, r0, r3
 8007996:	3301      	adds	r3, #1
 8007998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800799c:	2b00      	cmp	r3, #0
 800799e:	bf0c      	ite	eq
 80079a0:	2301      	moveq	r3, #1
 80079a2:	2300      	movne	r3, #0
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	e012      	b.n	80079ce <HAL_I2C_Init+0x18e>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	1e58      	subs	r0, r3, #1
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6859      	ldr	r1, [r3, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	0099      	lsls	r1, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80079be:	3301      	adds	r3, #1
 80079c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_I2C_Init+0x196>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e022      	b.n	8007a1c <HAL_I2C_Init+0x1dc>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10e      	bne.n	80079fc <HAL_I2C_Init+0x1bc>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1e58      	subs	r0, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6859      	ldr	r1, [r3, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	440b      	add	r3, r1
 80079ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80079f0:	3301      	adds	r3, #1
 80079f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fa:	e00f      	b.n	8007a1c <HAL_I2C_Init+0x1dc>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	1e58      	subs	r0, r3, #1
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6859      	ldr	r1, [r3, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	0099      	lsls	r1, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a12:	3301      	adds	r3, #1
 8007a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	6809      	ldr	r1, [r1, #0]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69da      	ldr	r2, [r3, #28]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6911      	ldr	r1, [r2, #16]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	68d2      	ldr	r2, [r2, #12]
 8007a56:	4311      	orrs	r1, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	000186a0 	.word	0x000186a0
 8007ab8:	001e847f 	.word	0x001e847f
 8007abc:	003d08ff 	.word	0x003d08ff
 8007ac0:	431bde83 	.word	0x431bde83
 8007ac4:	10624dd3 	.word	0x10624dd3

08007ac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	817b      	strh	r3, [r7, #10]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007adc:	f7fe fb2a 	bl	8006134 <HAL_GetTick>
 8007ae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b20      	cmp	r3, #32
 8007aec:	f040 80e0 	bne.w	8007cb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2319      	movs	r3, #25
 8007af6:	2201      	movs	r2, #1
 8007af8:	4970      	ldr	r1, [pc, #448]	; (8007cbc <HAL_I2C_Master_Transmit+0x1f4>)
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 fa92 	bl	8008024 <I2C_WaitOnFlagUntilTimeout>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
 8007b08:	e0d3      	b.n	8007cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_I2C_Master_Transmit+0x50>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e0cc      	b.n	8007cb2 <HAL_I2C_Master_Transmit+0x1ea>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d007      	beq.n	8007b3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0201 	orr.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2221      	movs	r2, #33	; 0x21
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2210      	movs	r2, #16
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	893a      	ldrh	r2, [r7, #8]
 8007b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4a50      	ldr	r2, [pc, #320]	; (8007cc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b80:	8979      	ldrh	r1, [r7, #10]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	6a3a      	ldr	r2, [r7, #32]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f9ca 	bl	8007f20 <I2C_MasterRequestWrite>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e08d      	b.n	8007cb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	613b      	str	r3, [r7, #16]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007bac:	e066      	b.n	8007c7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	6a39      	ldr	r1, [r7, #32]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fb50 	bl	8008258 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00d      	beq.n	8007bda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d107      	bne.n	8007bd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e06b      	b.n	8007cb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d11b      	bne.n	8007c50 <HAL_I2C_Master_Transmit+0x188>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d017      	beq.n	8007c50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	6a39      	ldr	r1, [r7, #32]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fb47 	bl	80082e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d107      	bne.n	8007c78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e01a      	b.n	8007cb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d194      	bne.n	8007bae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
  }
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	00100002 	.word	0x00100002
 8007cc0:	ffff0000 	.word	0xffff0000

08007cc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007cd4:	f7fe fa2e 	bl	8006134 <HAL_GetTick>
 8007cd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	f040 8111 	bne.w	8007f0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2319      	movs	r3, #25
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4988      	ldr	r1, [pc, #544]	; (8007f18 <HAL_I2C_IsDeviceReady+0x254>)
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 f994 	bl	8008024 <I2C_WaitOnFlagUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
 8007d04:	e104      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_I2C_IsDeviceReady+0x50>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e0fd      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d007      	beq.n	8007d3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0201 	orr.w	r2, r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2224      	movs	r2, #36	; 0x24
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a70      	ldr	r2, [pc, #448]	; (8007f1c <HAL_I2C_IsDeviceReady+0x258>)
 8007d5c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 f952 	bl	8008024 <I2C_WaitOnFlagUntilTimeout>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d94:	d103      	bne.n	8007d9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e0b6      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007da2:	897b      	ldrh	r3, [r7, #10]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007db0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007db2:	f7fe f9bf 	bl	8006134 <HAL_GetTick>
 8007db6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	bf0c      	ite	eq
 8007dc6:	2301      	moveq	r3, #1
 8007dc8:	2300      	movne	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007de6:	e025      	b.n	8007e34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007de8:	f7fe f9a4 	bl	8006134 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d302      	bcc.n	8007dfe <HAL_I2C_IsDeviceReady+0x13a>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	22a0      	movs	r2, #160	; 0xa0
 8007e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2ba0      	cmp	r3, #160	; 0xa0
 8007e3e:	d005      	beq.n	8007e4c <HAL_I2C_IsDeviceReady+0x188>
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HAL_I2C_IsDeviceReady+0x188>
 8007e46:	7dbb      	ldrb	r3, [r7, #22]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0cd      	beq.n	8007de8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d129      	bne.n	8007eb6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e72:	2300      	movs	r3, #0
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2319      	movs	r3, #25
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4921      	ldr	r1, [pc, #132]	; (8007f18 <HAL_I2C_IsDeviceReady+0x254>)
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 f8c6 	bl	8008024 <I2C_WaitOnFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e036      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e02c      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ece:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2319      	movs	r3, #25
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	490f      	ldr	r1, [pc, #60]	; (8007f18 <HAL_I2C_IsDeviceReady+0x254>)
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f8a2 	bl	8008024 <I2C_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e012      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	3301      	adds	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	f4ff af32 	bcc.w	8007d5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e000      	b.n	8007f10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3720      	adds	r7, #32
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	00100002 	.word	0x00100002
 8007f1c:	ffff0000 	.word	0xffff0000

08007f20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d006      	beq.n	8007f4a <I2C_MasterRequestWrite+0x2a>
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d003      	beq.n	8007f4a <I2C_MasterRequestWrite+0x2a>
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f48:	d108      	bne.n	8007f5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	e00b      	b.n	8007f74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b12      	cmp	r3, #18
 8007f62:	d107      	bne.n	8007f74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f84f 	bl	8008024 <I2C_WaitOnFlagUntilTimeout>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00d      	beq.n	8007fa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d103      	bne.n	8007fa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e035      	b.n	8008014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fb0:	d108      	bne.n	8007fc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fb2:	897b      	ldrh	r3, [r7, #10]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fc0:	611a      	str	r2, [r3, #16]
 8007fc2:	e01b      	b.n	8007ffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fc4:	897b      	ldrh	r3, [r7, #10]
 8007fc6:	11db      	asrs	r3, r3, #7
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0306 	and.w	r3, r3, #6
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f063 030f 	orn	r3, r3, #15
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	490e      	ldr	r1, [pc, #56]	; (800801c <I2C_MasterRequestWrite+0xfc>)
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f898 	bl	8008118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e010      	b.n	8008014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ff2:	897b      	ldrh	r3, [r7, #10]
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	4907      	ldr	r1, [pc, #28]	; (8008020 <I2C_MasterRequestWrite+0x100>)
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 f888 	bl	8008118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	00010008 	.word	0x00010008
 8008020:	00010002 	.word	0x00010002

08008024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008034:	e048      	b.n	80080c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d044      	beq.n	80080c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803e:	f7fe f879 	bl	8006134 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d139      	bne.n	80080c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	0c1b      	lsrs	r3, r3, #16
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b01      	cmp	r3, #1
 800805c:	d10d      	bne.n	800807a <I2C_WaitOnFlagUntilTimeout+0x56>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	43da      	mvns	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4013      	ands	r3, r2
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	bf0c      	ite	eq
 8008070:	2301      	moveq	r3, #1
 8008072:	2300      	movne	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	e00c      	b.n	8008094 <I2C_WaitOnFlagUntilTimeout+0x70>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	43da      	mvns	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4013      	ands	r3, r2
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	429a      	cmp	r2, r3
 8008098:	d116      	bne.n	80080c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	f043 0220 	orr.w	r2, r3, #32
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e023      	b.n	8008110 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	0c1b      	lsrs	r3, r3, #16
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d10d      	bne.n	80080ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	43da      	mvns	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4013      	ands	r3, r2
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf0c      	ite	eq
 80080e4:	2301      	moveq	r3, #1
 80080e6:	2300      	movne	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	461a      	mov	r2, r3
 80080ec:	e00c      	b.n	8008108 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	43da      	mvns	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4013      	ands	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	429a      	cmp	r2, r3
 800810c:	d093      	beq.n	8008036 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008126:	e071      	b.n	800820c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008136:	d123      	bne.n	8008180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008146:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	f043 0204 	orr.w	r2, r3, #4
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e067      	b.n	8008250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d041      	beq.n	800820c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008188:	f7fd ffd4 	bl	8006134 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	d302      	bcc.n	800819e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d136      	bne.n	800820c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d10c      	bne.n	80081c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	43da      	mvns	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4013      	ands	r3, r2
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bf14      	ite	ne
 80081ba:	2301      	movne	r3, #1
 80081bc:	2300      	moveq	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	e00b      	b.n	80081da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	43da      	mvns	r2, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	4013      	ands	r3, r2
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d016      	beq.n	800820c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	f043 0220 	orr.w	r2, r3, #32
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e021      	b.n	8008250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	0c1b      	lsrs	r3, r3, #16
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b01      	cmp	r3, #1
 8008214:	d10c      	bne.n	8008230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	43da      	mvns	r2, r3
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4013      	ands	r3, r2
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	bf14      	ite	ne
 8008228:	2301      	movne	r3, #1
 800822a:	2300      	moveq	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	e00b      	b.n	8008248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	43da      	mvns	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4013      	ands	r3, r2
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	bf14      	ite	ne
 8008242:	2301      	movne	r3, #1
 8008244:	2300      	moveq	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	f47f af6d 	bne.w	8008128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008264:	e034      	b.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f886 	bl	8008378 <I2C_IsAcknowledgeFailed>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e034      	b.n	80082e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d028      	beq.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827e:	f7fd ff59 	bl	8006134 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	429a      	cmp	r2, r3
 800828c:	d302      	bcc.n	8008294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d11d      	bne.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829e:	2b80      	cmp	r3, #128	; 0x80
 80082a0:	d016      	beq.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e007      	b.n	80082e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	d1c3      	bne.n	8008266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082f4:	e034      	b.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 f83e 	bl	8008378 <I2C_IsAcknowledgeFailed>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e034      	b.n	8008370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d028      	beq.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830e:	f7fd ff11 	bl	8006134 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	429a      	cmp	r2, r3
 800831c:	d302      	bcc.n	8008324 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11d      	bne.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b04      	cmp	r3, #4
 8008330:	d016      	beq.n	8008360 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e007      	b.n	8008370 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b04      	cmp	r3, #4
 800836c:	d1c3      	bne.n	80082f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800838e:	d11b      	bne.n	80083c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008398:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	f043 0204 	orr.w	r2, r3, #4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e272      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8087 	beq.w	8008502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083f4:	4b92      	ldr	r3, [pc, #584]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 030c 	and.w	r3, r3, #12
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d00c      	beq.n	800841a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008400:	4b8f      	ldr	r3, [pc, #572]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f003 030c 	and.w	r3, r3, #12
 8008408:	2b08      	cmp	r3, #8
 800840a:	d112      	bne.n	8008432 <HAL_RCC_OscConfig+0x5e>
 800840c:	4b8c      	ldr	r3, [pc, #560]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008418:	d10b      	bne.n	8008432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800841a:	4b89      	ldr	r3, [pc, #548]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d06c      	beq.n	8008500 <HAL_RCC_OscConfig+0x12c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d168      	bne.n	8008500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e24c      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843a:	d106      	bne.n	800844a <HAL_RCC_OscConfig+0x76>
 800843c:	4b80      	ldr	r3, [pc, #512]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a7f      	ldr	r2, [pc, #508]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	e02e      	b.n	80084a8 <HAL_RCC_OscConfig+0xd4>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10c      	bne.n	800846c <HAL_RCC_OscConfig+0x98>
 8008452:	4b7b      	ldr	r3, [pc, #492]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a7a      	ldr	r2, [pc, #488]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	4b78      	ldr	r3, [pc, #480]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a77      	ldr	r2, [pc, #476]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	e01d      	b.n	80084a8 <HAL_RCC_OscConfig+0xd4>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008474:	d10c      	bne.n	8008490 <HAL_RCC_OscConfig+0xbc>
 8008476:	4b72      	ldr	r3, [pc, #456]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a71      	ldr	r2, [pc, #452]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800847c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	4b6f      	ldr	r3, [pc, #444]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a6e      	ldr	r2, [pc, #440]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e00b      	b.n	80084a8 <HAL_RCC_OscConfig+0xd4>
 8008490:	4b6b      	ldr	r3, [pc, #428]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a6a      	ldr	r2, [pc, #424]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	4b68      	ldr	r3, [pc, #416]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a67      	ldr	r2, [pc, #412]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 80084a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d013      	beq.n	80084d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b0:	f7fd fe40 	bl	8006134 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b8:	f7fd fe3c 	bl	8006134 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b64      	cmp	r3, #100	; 0x64
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e200      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ca:	4b5d      	ldr	r3, [pc, #372]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0xe4>
 80084d6:	e014      	b.n	8008502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084d8:	f7fd fe2c 	bl	8006134 <HAL_GetTick>
 80084dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084e0:	f7fd fe28 	bl	8006134 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b64      	cmp	r3, #100	; 0x64
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e1ec      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084f2:	4b53      	ldr	r3, [pc, #332]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1f0      	bne.n	80084e0 <HAL_RCC_OscConfig+0x10c>
 80084fe:	e000      	b.n	8008502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d063      	beq.n	80085d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800850e:	4b4c      	ldr	r3, [pc, #304]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f003 030c 	and.w	r3, r3, #12
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800851a:	4b49      	ldr	r3, [pc, #292]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f003 030c 	and.w	r3, r3, #12
 8008522:	2b08      	cmp	r3, #8
 8008524:	d11c      	bne.n	8008560 <HAL_RCC_OscConfig+0x18c>
 8008526:	4b46      	ldr	r3, [pc, #280]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d116      	bne.n	8008560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008532:	4b43      	ldr	r3, [pc, #268]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <HAL_RCC_OscConfig+0x176>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d001      	beq.n	800854a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e1c0      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800854a:	4b3d      	ldr	r3, [pc, #244]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4939      	ldr	r1, [pc, #228]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800855a:	4313      	orrs	r3, r2
 800855c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800855e:	e03a      	b.n	80085d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d020      	beq.n	80085aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008568:	4b36      	ldr	r3, [pc, #216]	; (8008644 <HAL_RCC_OscConfig+0x270>)
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800856e:	f7fd fde1 	bl	8006134 <HAL_GetTick>
 8008572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008574:	e008      	b.n	8008588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008576:	f7fd fddd 	bl	8006134 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	2b02      	cmp	r3, #2
 8008582:	d901      	bls.n	8008588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e1a1      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008588:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0f0      	beq.n	8008576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008594:	4b2a      	ldr	r3, [pc, #168]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	4927      	ldr	r1, [pc, #156]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	600b      	str	r3, [r1, #0]
 80085a8:	e015      	b.n	80085d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085aa:	4b26      	ldr	r3, [pc, #152]	; (8008644 <HAL_RCC_OscConfig+0x270>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b0:	f7fd fdc0 	bl	8006134 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b8:	f7fd fdbc 	bl	8006134 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e180      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085ca:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f0      	bne.n	80085b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d03a      	beq.n	8008658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d019      	beq.n	800861e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085ea:	4b17      	ldr	r3, [pc, #92]	; (8008648 <HAL_RCC_OscConfig+0x274>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f0:	f7fd fda0 	bl	8006134 <HAL_GetTick>
 80085f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085f8:	f7fd fd9c 	bl	8006134 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b02      	cmp	r3, #2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e160      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800860a:	4b0d      	ldr	r3, [pc, #52]	; (8008640 <HAL_RCC_OscConfig+0x26c>)
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f0      	beq.n	80085f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008616:	2001      	movs	r0, #1
 8008618:	f000 faba 	bl	8008b90 <RCC_Delay>
 800861c:	e01c      	b.n	8008658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800861e:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <HAL_RCC_OscConfig+0x274>)
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008624:	f7fd fd86 	bl	8006134 <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800862a:	e00f      	b.n	800864c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800862c:	f7fd fd82 	bl	8006134 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d908      	bls.n	800864c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e146      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
 800863e:	bf00      	nop
 8008640:	40021000 	.word	0x40021000
 8008644:	42420000 	.word	0x42420000
 8008648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800864c:	4b92      	ldr	r3, [pc, #584]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e9      	bne.n	800862c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0304 	and.w	r3, r3, #4
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80a6 	beq.w	80087b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008666:	2300      	movs	r3, #0
 8008668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800866a:	4b8b      	ldr	r3, [pc, #556]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10d      	bne.n	8008692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008676:	4b88      	ldr	r3, [pc, #544]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	4a87      	ldr	r2, [pc, #540]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800867c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008680:	61d3      	str	r3, [r2, #28]
 8008682:	4b85      	ldr	r3, [pc, #532]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868a:	60bb      	str	r3, [r7, #8]
 800868c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800868e:	2301      	movs	r3, #1
 8008690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008692:	4b82      	ldr	r3, [pc, #520]	; (800889c <HAL_RCC_OscConfig+0x4c8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869a:	2b00      	cmp	r3, #0
 800869c:	d118      	bne.n	80086d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800869e:	4b7f      	ldr	r3, [pc, #508]	; (800889c <HAL_RCC_OscConfig+0x4c8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a7e      	ldr	r2, [pc, #504]	; (800889c <HAL_RCC_OscConfig+0x4c8>)
 80086a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086aa:	f7fd fd43 	bl	8006134 <HAL_GetTick>
 80086ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086b0:	e008      	b.n	80086c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086b2:	f7fd fd3f 	bl	8006134 <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	2b64      	cmp	r3, #100	; 0x64
 80086be:	d901      	bls.n	80086c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e103      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086c4:	4b75      	ldr	r3, [pc, #468]	; (800889c <HAL_RCC_OscConfig+0x4c8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0f0      	beq.n	80086b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d106      	bne.n	80086e6 <HAL_RCC_OscConfig+0x312>
 80086d8:	4b6f      	ldr	r3, [pc, #444]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	6213      	str	r3, [r2, #32]
 80086e4:	e02d      	b.n	8008742 <HAL_RCC_OscConfig+0x36e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10c      	bne.n	8008708 <HAL_RCC_OscConfig+0x334>
 80086ee:	4b6a      	ldr	r3, [pc, #424]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	4a69      	ldr	r2, [pc, #420]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	6213      	str	r3, [r2, #32]
 80086fa:	4b67      	ldr	r3, [pc, #412]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	4a66      	ldr	r2, [pc, #408]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008700:	f023 0304 	bic.w	r3, r3, #4
 8008704:	6213      	str	r3, [r2, #32]
 8008706:	e01c      	b.n	8008742 <HAL_RCC_OscConfig+0x36e>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b05      	cmp	r3, #5
 800870e:	d10c      	bne.n	800872a <HAL_RCC_OscConfig+0x356>
 8008710:	4b61      	ldr	r3, [pc, #388]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	4a60      	ldr	r2, [pc, #384]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008716:	f043 0304 	orr.w	r3, r3, #4
 800871a:	6213      	str	r3, [r2, #32]
 800871c:	4b5e      	ldr	r3, [pc, #376]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	4a5d      	ldr	r2, [pc, #372]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	6213      	str	r3, [r2, #32]
 8008728:	e00b      	b.n	8008742 <HAL_RCC_OscConfig+0x36e>
 800872a:	4b5b      	ldr	r3, [pc, #364]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	4a5a      	ldr	r2, [pc, #360]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008730:	f023 0301 	bic.w	r3, r3, #1
 8008734:	6213      	str	r3, [r2, #32]
 8008736:	4b58      	ldr	r3, [pc, #352]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	4a57      	ldr	r2, [pc, #348]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800873c:	f023 0304 	bic.w	r3, r3, #4
 8008740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d015      	beq.n	8008776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800874a:	f7fd fcf3 	bl	8006134 <HAL_GetTick>
 800874e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008750:	e00a      	b.n	8008768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008752:	f7fd fcef 	bl	8006134 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008760:	4293      	cmp	r3, r2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e0b1      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008768:	4b4b      	ldr	r3, [pc, #300]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0ee      	beq.n	8008752 <HAL_RCC_OscConfig+0x37e>
 8008774:	e014      	b.n	80087a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008776:	f7fd fcdd 	bl	8006134 <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800877c:	e00a      	b.n	8008794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800877e:	f7fd fcd9 	bl	8006134 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	f241 3288 	movw	r2, #5000	; 0x1388
 800878c:	4293      	cmp	r3, r2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e09b      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008794:	4b40      	ldr	r3, [pc, #256]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1ee      	bne.n	800877e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d105      	bne.n	80087b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087a6:	4b3c      	ldr	r3, [pc, #240]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	4a3b      	ldr	r2, [pc, #236]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80087ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8087 	beq.w	80088ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087bc:	4b36      	ldr	r3, [pc, #216]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f003 030c 	and.w	r3, r3, #12
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d061      	beq.n	800888c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d146      	bne.n	800885e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d0:	4b33      	ldr	r3, [pc, #204]	; (80088a0 <HAL_RCC_OscConfig+0x4cc>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087d6:	f7fd fcad 	bl	8006134 <HAL_GetTick>
 80087da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087de:	f7fd fca9 	bl	8006134 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e06d      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087f0:	4b29      	ldr	r3, [pc, #164]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f0      	bne.n	80087de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008804:	d108      	bne.n	8008818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008806:	4b24      	ldr	r3, [pc, #144]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	4921      	ldr	r1, [pc, #132]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008814:	4313      	orrs	r3, r2
 8008816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008818:	4b1f      	ldr	r3, [pc, #124]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a19      	ldr	r1, [r3, #32]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	430b      	orrs	r3, r1
 800882a:	491b      	ldr	r1, [pc, #108]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 800882c:	4313      	orrs	r3, r2
 800882e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008830:	4b1b      	ldr	r3, [pc, #108]	; (80088a0 <HAL_RCC_OscConfig+0x4cc>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008836:	f7fd fc7d 	bl	8006134 <HAL_GetTick>
 800883a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800883e:	f7fd fc79 	bl	8006134 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e03d      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008850:	4b11      	ldr	r3, [pc, #68]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x46a>
 800885c:	e035      	b.n	80088ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800885e:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <HAL_RCC_OscConfig+0x4cc>)
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008864:	f7fd fc66 	bl	8006134 <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800886c:	f7fd fc62 	bl	8006134 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e026      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <HAL_RCC_OscConfig+0x4c4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f0      	bne.n	800886c <HAL_RCC_OscConfig+0x498>
 800888a:	e01e      	b.n	80088ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d107      	bne.n	80088a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e019      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
 8008898:	40021000 	.word	0x40021000
 800889c:	40007000 	.word	0x40007000
 80088a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <HAL_RCC_OscConfig+0x500>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d106      	bne.n	80088c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d001      	beq.n	80088ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	40021000 	.word	0x40021000

080088d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0d0      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088ec:	4b6a      	ldr	r3, [pc, #424]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0307 	and.w	r3, r3, #7
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d910      	bls.n	800891c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fa:	4b67      	ldr	r3, [pc, #412]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f023 0207 	bic.w	r2, r3, #7
 8008902:	4965      	ldr	r1, [pc, #404]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	4313      	orrs	r3, r2
 8008908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800890a:	4b63      	ldr	r3, [pc, #396]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d001      	beq.n	800891c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e0b8      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d020      	beq.n	800896a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008934:	4b59      	ldr	r3, [pc, #356]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4a58      	ldr	r2, [pc, #352]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 800893a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800893e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800894c:	4b53      	ldr	r3, [pc, #332]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	4a52      	ldr	r2, [pc, #328]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008958:	4b50      	ldr	r3, [pc, #320]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	494d      	ldr	r1, [pc, #308]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008966:	4313      	orrs	r3, r2
 8008968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d040      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d107      	bne.n	800898e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800897e:	4b47      	ldr	r3, [pc, #284]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d115      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e07f      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2b02      	cmp	r3, #2
 8008994:	d107      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008996:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d109      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e073      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089a6:	4b3d      	ldr	r3, [pc, #244]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0302 	and.w	r3, r3, #2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e06b      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089b6:	4b39      	ldr	r3, [pc, #228]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f023 0203 	bic.w	r2, r3, #3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4936      	ldr	r1, [pc, #216]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089c8:	f7fd fbb4 	bl	8006134 <HAL_GetTick>
 80089cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ce:	e00a      	b.n	80089e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089d0:	f7fd fbb0 	bl	8006134 <HAL_GetTick>
 80089d4:	4602      	mov	r2, r0
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	f241 3288 	movw	r2, #5000	; 0x1388
 80089de:	4293      	cmp	r3, r2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e053      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089e6:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f003 020c 	and.w	r2, r3, #12
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d1eb      	bne.n	80089d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089f8:	4b27      	ldr	r3, [pc, #156]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d210      	bcs.n	8008a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a06:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f023 0207 	bic.w	r2, r3, #7
 8008a0e:	4922      	ldr	r1, [pc, #136]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a16:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <HAL_RCC_ClockConfig+0x1c0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d001      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e032      	b.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d008      	beq.n	8008a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a34:	4b19      	ldr	r3, [pc, #100]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	4916      	ldr	r1, [pc, #88]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0308 	and.w	r3, r3, #8
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a52:	4b12      	ldr	r3, [pc, #72]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	490e      	ldr	r1, [pc, #56]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a66:	f000 f821 	bl	8008aac <HAL_RCC_GetSysClockFreq>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <HAL_RCC_ClockConfig+0x1c4>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	091b      	lsrs	r3, r3, #4
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	490a      	ldr	r1, [pc, #40]	; (8008aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a78:	5ccb      	ldrb	r3, [r1, r3]
 8008a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7e:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8008a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fd fb12 	bl	80060b0 <HAL_InitTick>

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40022000 	.word	0x40022000
 8008a9c:	40021000 	.word	0x40021000
 8008aa0:	08009510 	.word	0x08009510
 8008aa4:	20000008 	.word	0x20000008
 8008aa8:	2000000c 	.word	0x2000000c

08008aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60bb      	str	r3, [r7, #8]
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d002      	beq.n	8008adc <HAL_RCC_GetSysClockFreq+0x30>
 8008ad6:	2b08      	cmp	r3, #8
 8008ad8:	d003      	beq.n	8008ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8008ada:	e027      	b.n	8008b2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008adc:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8008ade:	613b      	str	r3, [r7, #16]
      break;
 8008ae0:	e027      	b.n	8008b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	0c9b      	lsrs	r3, r3, #18
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	4a17      	ldr	r2, [pc, #92]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008aec:	5cd3      	ldrb	r3, [r2, r3]
 8008aee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008afa:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	0c5b      	lsrs	r3, r3, #17
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	4a11      	ldr	r2, [pc, #68]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008b06:	5cd3      	ldrb	r3, [r2, r3]
 8008b08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a0d      	ldr	r2, [pc, #52]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8008b0e:	fb03 f202 	mul.w	r2, r3, r2
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	e004      	b.n	8008b26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008b20:	fb02 f303 	mul.w	r3, r2, r3
 8008b24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	613b      	str	r3, [r7, #16]
      break;
 8008b2a:	e002      	b.n	8008b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8008b2e:	613b      	str	r3, [r7, #16]
      break;
 8008b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b32:	693b      	ldr	r3, [r7, #16]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	40021000 	.word	0x40021000
 8008b44:	007a1200 	.word	0x007a1200
 8008b48:	08009528 	.word	0x08009528
 8008b4c:	08009538 	.word	0x08009538
 8008b50:	003d0900 	.word	0x003d0900

08008b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr
 8008b64:	20000008 	.word	0x20000008

08008b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b6c:	f7ff fff2 	bl	8008b54 <HAL_RCC_GetHCLKFreq>
 8008b70:	4602      	mov	r2, r0
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	4903      	ldr	r1, [pc, #12]	; (8008b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b7e:	5ccb      	ldrb	r3, [r1, r3]
 8008b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40021000 	.word	0x40021000
 8008b8c:	08009520 	.word	0x08009520

08008b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008b98:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <RCC_Delay+0x34>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a0a      	ldr	r2, [pc, #40]	; (8008bc8 <RCC_Delay+0x38>)
 8008b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba2:	0a5b      	lsrs	r3, r3, #9
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
 8008baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008bac:	bf00      	nop
  }
  while (Delay --);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	60fa      	str	r2, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f9      	bne.n	8008bac <RCC_Delay+0x1c>
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bc80      	pop	{r7}
 8008bc2:	4770      	bx	lr
 8008bc4:	20000008 	.word	0x20000008
 8008bc8:	10624dd3 	.word	0x10624dd3

08008bcc <memset>:
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4402      	add	r2, r0
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d100      	bne.n	8008bd6 <memset+0xa>
 8008bd4:	4770      	bx	lr
 8008bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bda:	e7f9      	b.n	8008bd0 <memset+0x4>

08008bdc <__libc_init_array>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	2600      	movs	r6, #0
 8008be0:	4d0c      	ldr	r5, [pc, #48]	; (8008c14 <__libc_init_array+0x38>)
 8008be2:	4c0d      	ldr	r4, [pc, #52]	; (8008c18 <__libc_init_array+0x3c>)
 8008be4:	1b64      	subs	r4, r4, r5
 8008be6:	10a4      	asrs	r4, r4, #2
 8008be8:	42a6      	cmp	r6, r4
 8008bea:	d109      	bne.n	8008c00 <__libc_init_array+0x24>
 8008bec:	f000 f81a 	bl	8008c24 <_init>
 8008bf0:	2600      	movs	r6, #0
 8008bf2:	4d0a      	ldr	r5, [pc, #40]	; (8008c1c <__libc_init_array+0x40>)
 8008bf4:	4c0a      	ldr	r4, [pc, #40]	; (8008c20 <__libc_init_array+0x44>)
 8008bf6:	1b64      	subs	r4, r4, r5
 8008bf8:	10a4      	asrs	r4, r4, #2
 8008bfa:	42a6      	cmp	r6, r4
 8008bfc:	d105      	bne.n	8008c0a <__libc_init_array+0x2e>
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c04:	4798      	blx	r3
 8008c06:	3601      	adds	r6, #1
 8008c08:	e7ee      	b.n	8008be8 <__libc_init_array+0xc>
 8008c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0e:	4798      	blx	r3
 8008c10:	3601      	adds	r6, #1
 8008c12:	e7f2      	b.n	8008bfa <__libc_init_array+0x1e>
 8008c14:	0800953c 	.word	0x0800953c
 8008c18:	0800953c 	.word	0x0800953c
 8008c1c:	0800953c 	.word	0x0800953c
 8008c20:	08009540 	.word	0x08009540

08008c24 <_init>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr

08008c30 <_fini>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	bf00      	nop
 8008c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c36:	bc08      	pop	{r3}
 8008c38:	469e      	mov	lr, r3
 8008c3a:	4770      	bx	lr
